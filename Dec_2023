*********************************************************************************************************************
**** Check whether BST contains Dead End ( 01/12/23 ) ****

class Solution{
  public:
  
    void solve(int ll,int lu,int rl,int ru,int val,bool& ans,Node* root,int dirx,bool& one,bool& two){
    if(ans){
        return;
    }
    if(dirx){
        ll = root->data;
        lu = val;
        ru = root->data;
    }
    else{
        ll = root->data;
        rl = val;
        ru = root->data;
    }
    if(root->left == NULL && root->right == NULL){
        one=false; two=false;
        if(lu==-1){
           if(ll == 1){
               one = true;
           } 
        }
        else{
            if(ll-lu <= 1){
                one = true;
            }
        }
        if(rl!=-1){
            if(rl-ru <= 1){
                two = true;
            }
        }
        
        if(one && two){
            ans = true;
            return;
        }
    }
    
    if(root->left){
        solve(ll,lu,rl,ru,root->data,ans,root->left,0,one,two);
    }
    if(root->right){
        solve(ll,lu,rl,ru,root->data,ans,root->right,1,one,two);
    }
}
  
    bool isDeadEnd(Node *root)
    {
       int ll = root->data,lu = -1,rl = -1,ru = root->data;
    if(root->left == NULL && root->right == NULL){
        return false;
    }
    bool ans = false,one,two;
    if(root->left){
        solve(ll,lu,rl,ru,root->data,ans,root->left,0,one,two);
    }
    if(root->right){
        solve(ll,lu,rl,ru,root->data,ans,root->right,1,one,two);
    }
    return ans;
    }
};

**********************************************************************************************************************************
**** Inorder Traversal and BST ( 02/12/23 ) ****

class Solution{
    public:
    int isRepresentingBST(int arr[], int N)
    {
        for(int i=1;i<N;i++){
            if(arr[i]<=arr[i-1]){
                return false;
            }
        }
        return true;
    }
};

*******************************************************************************************************************************
**** Brothers From Different Roots ( 03/12/23 ) ****

class Solution
{
public:

    void solve(Node* root,vector<int>& v){
        if(root==NULL){
            return;
        }
        solve(root->left,v);
        v.push_back(root->data);
        solve(root->right,v);
    }
     
    int countPairs(Node* root1, Node* root2, int p)
    {
        int ans  = 0;
          vector<int> v1;
          solve(root1,v1);
          vector<int> v2;
          solve(root2,v2);
          int i=0,j=v2.size()-1;
          while(i<v1.size() && j>=0){
              if(v1[i]+v2[j]==p){
                  ans++;
                  i++; j--;
              }
              else if(v1[i]+v2[j]<p){
                  i++;
              }
              else{
                  j--;
              }
          }
          return ans;
    }
};

*************************************************************************************************************
