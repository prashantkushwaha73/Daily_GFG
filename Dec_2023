*********************************************************************************************************************
**** Check whether BST contains Dead End ( 01/12/23 ) ****

class Solution{
  public:
  
    void solve(int ll,int lu,int rl,int ru,int val,bool& ans,Node* root,int dirx,bool& one,bool& two){
    if(ans){
        return;
    }
    if(dirx){
        ll = root->data;
        lu = val;
        ru = root->data;
    }
    else{
        ll = root->data;
        rl = val;
        ru = root->data;
    }
    if(root->left == NULL && root->right == NULL){
        one=false; two=false;
        if(lu==-1){
           if(ll == 1){
               one = true;
           } 
        }
        else{
            if(ll-lu <= 1){
                one = true;
            }
        }
        if(rl!=-1){
            if(rl-ru <= 1){
                two = true;
            }
        }
        
        if(one && two){
            ans = true;
            return;
        }
    }
    
    if(root->left){
        solve(ll,lu,rl,ru,root->data,ans,root->left,0,one,two);
    }
    if(root->right){
        solve(ll,lu,rl,ru,root->data,ans,root->right,1,one,two);
    }
}
  
    bool isDeadEnd(Node *root)
    {
       int ll = root->data,lu = -1,rl = -1,ru = root->data;
    if(root->left == NULL && root->right == NULL){
        return false;
    }
    bool ans = false,one,two;
    if(root->left){
        solve(ll,lu,rl,ru,root->data,ans,root->left,0,one,two);
    }
    if(root->right){
        solve(ll,lu,rl,ru,root->data,ans,root->right,1,one,two);
    }
    return ans;
    }
};

**********************************************************************************************************************************
**** Inorder Traversal and BST ( 02/12/23 ) ****

class Solution{
    public:
    int isRepresentingBST(int arr[], int N)
    {
        for(int i=1;i<N;i++){
            if(arr[i]<=arr[i-1]){
                return false;
            }
        }
        return true;
    }
};

*******************************************************************************************************************************
**** Brothers From Different Roots ( 03/12/23 ) ****

class Solution
{
public:

    void solve(Node* root,vector<int>& v){
        if(root==NULL){
            return;
        }
        solve(root->left,v);
        v.push_back(root->data);
        solve(root->right,v);
    }
     
    int countPairs(Node* root1, Node* root2, int p)
    {
        int ans  = 0;
          vector<int> v1;
          solve(root1,v1);
          vector<int> v2;
          solve(root2,v2);
          int i=0,j=v2.size()-1;
          while(i<v1.size() && j>=0){
              if(v1[i]+v2[j]==p){
                  ans++;
                  i++; j--;
              }
              else if(v1[i]+v2[j]<p){
                  i++;
              }
              else{
                  j--;
              }
          }
          return ans;
    }
};

*************************************************************************************************************
**** How Many X's? ( 06/12/23 ) ****

class Solution {
  public:
  
    int solve(int n,int x){
        int r=0;
        while(n){
            if(n%10 == x){
                r++;
            }
            n/=10;
        }
        return r;
    }
  
    int countX(int L, int R, int X) {
        int ans = 0;
        for(int i=L+1;i<R;i++){
            ans += solve(i,X);
        }
        return ans;
    }
};

****************************************************************************************************************************
**** Transform to prime ( 08/12/23 ) ****

class Solution
{
    public:
    bool isPrime(int n)
{
    // Corner case
    if (n <= 1)
        return false;
 
    // Check from 2 to n-1
    for (int i = 2; i <= n / 2; i++)
        if (n % i == 0)
            return false;
    return true;
}
    int minNumber(int arr[],int N)
    {
        int sum = 0;
        for(int i=0;i<N;i++){
            sum += arr[i];
        }
        int v = sum;
        while(1){
            if(isPrime(v)){
                break;
            }
            v++;
        }
        return v-sum;
    }
};

*********************************************************************************************************
**** Subarray with 0 sum ( 10/12/23 ) ****

class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        unordered_map<int,bool> m;
        int sum = 0;
        for(int i=0;i<n;i++){
            if(arr[i]==0){
                return true;
            }
            sum+=arr[i];
            if(sum==0){
                return true;
            }
            if(m[sum]){
                return true;
            }
            m[sum]=true;
        }
        return false;
    }
};

********************************************************************************************************************
**** Max Sum Subarray of size K ( 11/12/23 ) ****

class Solution{   
public:
    long maximumSumSubarray(int K, vector<int> &Arr , int N){
        int s=0,e=0;
        long sum=0,ans;
        for(e;e<K;e++){
            sum+=Arr[e];
        }
        ans=sum;
        while(e<N){
            sum+=Arr[e];
            sum-=Arr[s];
            if(sum>ans){
                ans=sum;
            }
            s++;
            e++;
        }
        return ans;
    }
};

*******************************************************************************************************************************
**** Gold Mine Problem ( 12/12/23 ) ****

class Solution{
public:
    int solve(int i,int j,int n,int m,vector<vector<int>>& M,vector<vector<int>>& dp){
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int v = 0;
        if(i-1>=0 && j+1<m){
            v = max(v,solve(i-1,j+1,n,m,M,dp));
        }
        if(j+1<m){
            v = max(v,solve(i,j+1,n,m,M,dp));
        }
        if(i+1<n && j+1<m){
            v = max(v,solve(i+1,j+1,n,m,M,dp));
        }
        return dp[i][j] = M[i][j]+v;
    }
   
    int maxGold(int n, int m, vector<vector<int>> M)
    {
        vector<vector<int>> dp(n,vector<int> (m,-1));
        int ans = INT_MIN;
        for(int i=0;i<n;i++){
            ans = max(ans,solve(i,0,n,m,M,dp));
        }
        return ans;
    }
};

*****************************************************************************************************************************
