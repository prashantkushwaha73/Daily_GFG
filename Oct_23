********************************************************************************************
**** Boundary traversal of matrix ( 01/10/23 ) ****

class Solution
{   
    public:
    //Function to return list of integers that form the boundary 
    //traversal of the matrix in a clockwise manner.
    vector<int> boundaryTraversal(vector<vector<int> > matrix, int n, int m) 
    {
        vector<int> ans;
        int i = 0;
        for(int j = 0;j<m;j++){
            ans.push_back(matrix[i][j]);
        }
        if(n==1){
            return ans;
        }
        int j = m-1;
        for(i=1;i<n;i++){
            ans.push_back(matrix[i][j]);
        }
        if(m==1){
            return ans;
        }
        i = n-1;
        for(j = m-2;j>=0;j--){
            ans.push_back(matrix[i][j]);
        }
        j = 0;
        for(i=n-2;i>0;i--){
            ans.push_back(matrix[i][j]);
        }
        return ans;
    }
}; 

********************************************************************************************************************
**** Column name from a given column number ( 03/10/23 ) ****

class Solution{
    public:
    string colName (long long int columnNumber)
    {
        long long int n;
        string ans="";
        vector<char> alpha={'A','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
        while(columnNumber!=0){
            if(columnNumber<=26){
                ans = alpha[columnNumber] + ans;
                return ans;
            }
            n = columnNumber%26;
            if(n){
                ans = alpha[n] + ans;
                columnNumber /= 26;
            }
            else{
                ans = alpha[26] + ans;
                columnNumber /= 26;
                columnNumber -= 1;
            }
        }
        return ans;
    }
};

*************************************************************************************************
**** Roman Number to Integer ( 04/10/23 ) ****

class Solution {
  public:
    int romanToDecimal(string &str) {
        unordered_map<char,pair<int,int>> m;
        m['I']={1,1}; m['V']={5,2} ; m['X']= {10,3} ; m['L']={50,4}; m['C']={100,5}; m['D']={500,6}; m['M']={1000,7};
        reverse(str.begin(),str.end());
        int ans = 0;
        for(int i=0;i<str.size();i++){
            if(i<str.size()-1 && m[str[i]].second > m[str[i+1]].second){
                ans += (m[str[i]].first - m[str[i+1]].first);
                i++;
            }
            else{
            ans += m[str[i]].first;
            }
        }
        return ans;
    }
};

*****************************************************************************************
**** Pairwise swap elements of a linked list ( 07/10/23 ) ****

class Solution
{
    public:
    Node* pairWiseSwap(struct Node* head) 
    {
        if(head->next == NULL){
            return head;
        }
        Node* ans = head->next;
        Node* first = head;
        Node* second = head->next;
        Node* temp = second->next;
        second->next = first;
        first->next = temp;
        temp = first;
        first=first->next;
        if(first == NULL){
            return ans;
        }
        second = first->next;
        Node* pemp;
        while(second){
            pemp = second->next;
            temp->next = second;
            second->next = first;
            first->next = pemp;
            temp = first;
             first=first->next;
             if(first == NULL){
                 break;
             }
        second = first->next;
        }
        return ans;
    }
};

************************************************************************************
**** Insert in a Sorted List ( 10/08/23 ) ****

class Solution{
  public:
    // Should return head of the modified linked list
    Node *sortedInsert(struct Node* head, int data) {
        Node* temp = new Node(data);
        Node* trav = head;
        if(head->data >= data){
            temp->next = head;
            return temp;
        }
        while(1){
            if(trav->next){
                if(trav->next->data >= data){
                    temp->next = trav->next;
                    trav->next = temp;
                    return head;
                }
                else{
                    trav = trav->next;
                }
            }
            else{
                break;
            }
        }
        trav->next = temp;
        return head;
    }
};

**********************************************************************************************************
**** Height of Binary Tree ( 09/10/23 ) ****


//User function template for C++

/*
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
*/
class Solution{
    public:
    //Function to find the height of a binary tree.
    int height(struct Node* node){
        int ans=0;
        queue<Node*> store;
        store.push(node);
        store.push(NULL);
        while(store.size()!=0){
            Node* temp=store.front();
            store.pop();
            if(temp==NULL){
                ans++;
                if(store.size()!=0){
                    store.push(NULL);
                }
            }
             else{
                    if(temp->left){
                        store.push(temp->left);
                    }
                    if(temp->right){
                        store.push(temp->right);
                    }
                }
        }
        return ans;
    }
};


*************************************************************************************************************
**** Check for Balanced Tree ( 11/10/23 ) ****

class Solution{
    private:
    pair<bool,int> solve(Node* root){
        if(root==NULL){
            pair<bool,int> p=make_pair(true,0);
            return p;
        }
        pair<bool,int> left=solve(root->left);
        pair<bool,int> right=solve(root->right);
        bool diff=abs(left.second-right.second)<=1;
        pair<bool,int> ans;
        ans.first=(left.first && right.first && diff);
        ans.second=max(left.second,right.second)+1;
        return ans;
        
    }
    public:
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        return solve(root).first;
    }
};

********************************************************************************************
**** Floor in BST ( 13/10/23 ) ****

class Solution{
public:

   void solve(Node* root,int x,int& ans){
       if(root==NULL){
           return;
       }
       if(root->data == x){
           ans = root->data;
           return;
       }
       if(root->data < x ){
           ans = root->data;
           solve(root->right,x,ans);
       }
       else{
           solve(root->left,x,ans);
        }
   }
  
    int floor(Node* root, int x) {
        int ans = -1;
        solve(root,x,ans);
        return ans;
    }
};

***********************************************************************************************************
**** Find Common Nodes in two BSTs ( 14/10/23 ) ****


class Solution
{
    public:
    
    void solve2(Node* root,vector<int>& ans,unordered_map<int,bool>& m){
        if(root == NULL){
            return;
        }
        solve2(root->left,ans,m);
        if(m[root->data]){
            ans.push_back(root->data);
        }
        solve2(root->right,ans,m);
    }
   
     void solve1(Node* root,unordered_map<int,bool>& m){
         if(root==NULL){
             return;
         }
         m[root->data] = true;
         solve1(root->left,m);
         solve1(root->right,m);
     }
     
    vector <int> findCommon(Node *root1, Node *root2)
    {
       unordered_map<int,bool> m;
       vector<int> ans;
       solve1(root1,m);
       solve2(root2,ans,m);
       return ans;
    }
};

**************************************************************************************************************
**** Normal BST to Balanced BST ( 15/10/23 ) ****

class Solution{
    
    public:
    void solve1(Node* root,vector<int> &v){
        if(root==NULL){
            return;
        }
        solve1(root->left,v);
        v.push_back(root->data);
        solve1(root->right,v);
    }
    
    Node* solve2(vector<int> v,int s,int e){
        int mid = s+(e-s)/2;
        Node* temp = new Node(v[mid]);
        if(s<=mid-1){
        temp->left = solve2(v,s,mid-1);}
        if(mid+1<=e){
        temp->right = solve2(v,mid+1,e);}
        return temp;
    }
    
    Node* buildBalancedTree(Node* root)
    {
    	vector<int> v;
    	solve1(root,v);
    	return solve2(v,0,v.size()-1);
    }
};

*************************************************************************************
**** Eventual Safe States ( 18/10/23 ) ****

class Solution {
  public:
  
     bool solve(vector<bool>& ans,vector<bool>& visited,vector<int> adj[],int n,unordered_map<int,bool>& m){
         if(m[n]){
             return ans[n];
         }
         for(int i=0;i<adj[n].size();i++){
             if(visited[adj[n][i]]){
                 return false;
             }
             if(ans[adj[n][i]] == false){
                 return false;
             }
             visited[adj[n][i]] = true;
             ans[adj[n][i]] = solve(ans,visited,adj,adj[n][i],m);
             m[adj[n][i]] = true;
             visited[adj[n][i]] = false;
             if(ans[adj[n][i]]==false){
                 return false;
             }
         }
         return true;
     }
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        unordered_map<int,bool> m;
        vector<bool> ans(V,true);
        vector<bool> visited(V,false);
        for(int i=0;i<V;i++){
            if(m[i] == false){
                 visited[i] = true;
            if(ans[i]){
            ans[i] = solve(ans,visited,adj,i,m);
            m[i] = true;
            }
            visited[i] = false;
            }
        }
        vector<int> final;
        for(int i=0;i<ans.size();i++){
            if(ans[i]){
                final.push_back(i);
            }
        }
        return final;
    }
};

************************************************************************************************
**** 844. Backspace String Compare ( 19/10/23 ) ****

class Solution {
public:
    string solve(string s){
        stack<char> st;
        for(int i=0;i<s.size();i++){
            if(s[i] == '#'){
                if(!st.empty()){
                    st.pop();
                }
            }
            else{
                st.push(s[i]);
            }
        }
        string ans;
        while(!st.empty()){
            ans.push_back(st.top());
            st.pop();
        }
        return ans;
    }
    bool backspaceCompare(string s, string t) {
       return ( solve(s) == solve(t) );
    }
};

**********************************************************************************************************
**** Sum of all divisors from 1 to n ( 21/10/23 ) ****

class Solution
{
public:
    long long sumOfDivisors(int N)
    {
        long long ans = 0;
        for(int i=1;i<=N;i++){
            ans += i*(N/i);
        }
        return ans;
    }
};

***********************************************************************************************
**** Maximum sum increasing subsequence ( 23/10/23 ) ****

class Solution{
	public:
	
	int solve(int arr[],int n,int posi,vector<int>& dp){
	    if(dp[posi] != -1){
	        return dp[posi];
	    }
	    int v = 0,p;
	    for(int i=posi+1;i<n;i++){
	        p = 0;
	        if(arr[i] > arr[posi]){
	             p = arr[i] + solve(arr,n,i,dp);
	        }
	        v = max(v,p);
	    }
	    return dp[posi] = v;
	}
	
	
	int maxSumIS(int arr[], int n)  
	{  
	    vector<int> dp(n,-1);
	    int ans = INT_MIN;
	    int data;
	    for(int i=0;i<n;i++){
	       data = arr[i] + solve(arr,n,i,dp);
	       ans = max(ans,data);
	    }
	    return ans;
	}  
};

****************************************************************************************
