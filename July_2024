*******************************************************************************************************************************************************************************************
**** Make Binary Tree From Linked List ( 01/07/24 ) ****

void convert(Node *head, TreeNode *&root) {
    queue<TreeNode*> q;
    Node* temp = head;
    root = new TreeNode(temp->data);
    q.push(root); temp = temp->next;
    int n; TreeNode* neww;
    while(q.size()){
        n = q.size();
        for(int i=0;i<n;i++){
            if(temp){
                neww = new TreeNode(temp->data);
                q.front()->left = neww;
                temp = temp->next;
                q.push(neww);
            }
            if(temp){
                neww = new TreeNode(temp->data);
                q.front()->right = neww;
                temp = temp->next;
                q.push(neww);
            }
            else{
                return;
            }
            q.pop();
        }
    }
    return;
}

*******************************************************************************************************************************************************************************************************
**** linked list of strings forms a palindrome ( 02/07/24 ) ****

class Solution {
  public:
    bool compute(Node* head) {
        string str = "";
        while(head){
            str += head->data;
            head=head->next;
        }
        int i=0,j=str.size()-1;
        while(i<j){
            if(str[i]!=str[j]){
                return false;
            }
            i++; j--;
        }
        return true;
    }
};

*****************************************************************************************************************
**** Remove all occurences of duplicates in a linked list ( 03/07/24 ) ****

class Solution {
  public:
    Node* removeAllDuplicates(struct Node* head) {
        Node* ans = new Node(-1);
        Node* p = ans;
        int v=head->data,count=1;
        head = head->next;
        while(head){
            if(head->data == v){
                count++;
            }
            else{
                if(count==1){
                    Node* neww = new Node(v);
                    p->next = neww;
                    p = neww;
                    v=head->data;
                    count=1;
                }
                else{
                     v=head->data;
                    count=1;
                }
            }
            head=head->next;
        }
        if(count==1){
                    Node* neww = new Node(v);
                    p->next = neww;
                    p = neww;
                }
                return ans->next;
    }
};

***********************************************************************************************************************************************
/**** Vertical Width of a Binary Tree ( 05/07/24 ) ****

class Solution {
  public:
    // Function to find the vertical width of a Binary Tree.
    
    void solve(Node* root,int posi,int& mini,int& maxi){
        if(root==NULL){
            return;
        }
        if(posi<mini){
            mini = posi;
        }
        if(posi>maxi){
            maxi = posi;
        }
        solve(root->left,posi-1,mini,maxi);
        solve(root->right,posi+1,mini,maxi);
    }
    
    int verticalWidth(Node* root) {
        if(root==NULL){
            return 0;
        }
        set<int> st;
        int posi = 0,mini=0,maxi=0;
        solve(root,posi,mini,maxi);
        return maxi-mini+1;
    }
};

************************************************************************************************************************************************
**** Populate Inorder Successor for all nodes ( 06/07/24 ) ****

class Solution {
  public:
     Node* prev = new Node(-1);
     
    void populateNext(Node *root) {
        if(root==NULL) return;
        populateNext(root->left);
        if(prev!=NULL){
            prev->next = root;
        }
        prev = root;
        populateNext(root->right);
    }
};

****************************************************************************************************************************************************
**** Ancestors in Binary Tree ( 07/07/24 ) ****

class Solution {
  public:
  
    void solve(Node* root,vector<int>& ans,bool& flag,int& target){
        if(root==NULL || flag){
            return;
        }
        if(root->data == target){
            flag = true;
            return;
        }
        ans.push_back(root->data);
        solve(root->left,ans,flag,target);
        solve(root->right,ans,flag,target);
        if(flag==false){
            ans.pop_back();
        }
        
    }
   
    // Function should return all the ancestor of the target node
    vector<int> Ancestors(struct Node *root, int target) {
        vector<int> ans;
        if(root->data == target){
            return ans;
        }
        bool flag = false;
        solve(root,ans,flag,target);
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

************************************************************************************************************************************************
**** Closest Three Sum ( 09/07/24 ) ****

class Solution {
  public:
    int threeSumClosest(vector<int> arr, int target) {
        sort(arr.begin(),arr.end());
        int ans = -1,s,e,n=arr.size(),v=INT_MAX;
        for(int i=0;i<n;i++){
            s = i+1; e = n-1;
            while(s<e){
                if(abs((arr[i]+arr[s]+arr[e])-target) < v){
                    v = abs((arr[i]+arr[s]+arr[e])-target);
                    
                        ans = arr[i]+arr[s]+arr[e];
                }
                if(abs((arr[i]+arr[s]+arr[e])-target) == v){
                    ans = max(ans,arr[i]+arr[s]+arr[e]);
                }
                if(arr[i]+arr[s]+arr[e] < target){
                    s++;
                }
                else{
                    e--;
                }
            }
        }
        return ans;
    }
};

*******************************************************************************************************************************************
**** Root to leaf path sum ( 12/07/24 ) ****

class Solution {
  public:
    
    void solve(Node* root,int sum,int &target,bool& ans){
        if(root==NULL){
            return;
        }
        sum += root->data;
        if(root->left==NULL && root->right==NULL && sum==target){
            ans = true;
            return;
        }
        solve(root->left,sum,target,ans);
        solve(root->right,sum,target,ans);
        
    }
  
    bool hasPathSum(Node *root, int target) {
        bool ans = false;
        solve(root,0,target,ans);
        return ans;
    }
};

*******************************************************************************************************************************************************
**** Segregate 0s and 1s ( 14/07/24 ) ****

class Solution {
  public:
    void segregate0and1(vector<int> &arr) {
        int count = 0;
        for(int i=0;i<arr.size();i++){
            if(arr[i]==0){
                count++;
            }
        }
        for(int i=0;i<arr.size();i++){
            if(count){
                arr[i] = 0;
                count--;
            }
            else{
                arr[i] = 1;
            }
        }
    }
};

******************************************************************************************************************************************************
**** Remaining String ( 16/07/24 ) ****

class Solution {
  public:
    string printString(string s, char ch, int count) {
        string ans = "";
        int posi = 0;
        while(posi<s.size()){
            if(count == 0){
                ans.push_back(s[posi]);
            }
            else{
                if(s[posi]==ch){
                    count--;
                }
                
            }
            posi++;
        }
        return ans;
    }
};

*********************************************************************************************************************************************************
