************************************************************************************************************************************************
**** Odd Even Problem ( 01/06/24 ) ****

class Solution {
  public:
    string oddEven(string s) {
        int ans = 0,x=0,y=0;
        vector<int> v(26,0);
        for(int i=0;i<s.size();i++){
            v[s[i]-'a']++;
        }
        for(int i=0;i<26;i++){
            if(v[i]>0){
                if(v[i]%2){
                    if((i+1)%2){
                        y++;
                    }
                }
                else{
                    if((i+1)%2==0){
                        x++;
                    }
                }
            }
        }
        if((x+y)%2==0){
            return "EVEN";
        }
        return "ODD";
    }
};

**********************************************************************************************************************************************************
**** Binary representation of next number ( 04/06/24 ) ****

class Solution {
  public:
    string binaryNextNumber(string s) {
        bool flag = false;
        for(int i=s.size()-1;i>=0;i--){
            if(s[i]=='0'){
                s[i] = '1';
                flag = true;
                break;
            }
            else{
                s[i]='0';
            }
        }
        if(flag){
           while(s[0]=='0'){
               s = s.substr(1,s.size()-1);
           }
           return s;
        }
        return "1"+s;
    }
};

******************************************************************************************************************************************************
**** Index of an Extra Element ( 08/06/24 ) ****

class Solution {
  public:
    int findExtra(int n, int arr1[], int arr2[]) {
        if(arr1[0]!=arr2[0]){
            return 0;
        }
        if(arr1[n-1]!=arr2[n-2]){
            return n-1;
        }
        int a = 0,b = n-1,mid;
        while(1){
            if(a+1==b){
                if(arr1[a]!=arr2[a]){
                    return a;
                }
                return b;
            }
            mid = a + (b-a)/2;
            if(arr1[mid]==arr2[mid]){
                a = mid;
            }
            else{
                b = mid;
            }
        }
        return -1;
    }
};

************************************************************************************************************************************************
**** Convert array into Zig-Zag fashion ( 09/06/24 ) ****

class Solution {
  public:
    void zigZag(int n, vector<int> &arr) {
        sort(arr.begin(),arr.end());
        int i = 1;
        while(i+1<n){
            swap(arr[i],arr[i+1]);
            i+=2;
        }
    }
};

****************************************************************************************************************************************************
**** Count numbers containing 4 ( 12/06/24 ) ****

class Solution {
  public:
    int countNumberswith4(int n) {
         int count=0;
        for(int i=1;i<n+1;i++){
           int temp=i;
           while(temp>0){
               if(temp%10==4){
                   count++;
                   break;
               }
               temp/=10;
           }
       }
       return count;
    }
};

*********************************************************************************************************************************************************
**** Padovan Sequence ( 13/06/24 ) ****

class Solution
{
    public:
    
    int M = 1e9+7;
    
    int padovanSequence(int n)
    {
       int a=1,b=1,c=1,i=3,p,t;
       if(n==0||n==1||n==2){
           return 1;
       }
       while(i<n){
           p = (a+b)%M;
           t = b; b = c; a = t; c = p;
           i++;
       }
       return (a+b)%M;
    }
    
};

************************************************************************************************************************************************************
**** Armstrong Numbers ( 14/06/24 ) ****

class Solution {
  public:
    string armstrongNumber(int n){
        int v = n,m=0,p;
        p = v%10;
        v/=10;
        m += pow(p,3);
        p=v%10;
        v/=10;
        m+=pow(p,3);
        p=v%10;
        v/=10;
        m+=pow(p,3);
        if(n==m){
            return "Yes";
        }
        return "No";
    }
};

***********************************************************************************************************************************************************
**** Compare two fractions ( 21/06/24 ) ****

class Solution {
  public:
    string compareFrac(string str) {
            float a=0,b=0,c=0,d=0,i=0;
            while(str[i]!='/'){
                a *= 10;
                a += (str[i]-'0');
                i++;
            }
            i++;
            while(str[i]!=','){
                b *= 10;
                b += (str[i]-'0');
                i++;
            }
            i++; i++;
            while(str[i]!='/'){
                c *= 10;
                c += (str[i]-'0');
                i++;
            }
            i++;
            while(i<str.size()){
                d *= 10;
                d += (str[i]-'0');
                i++;
            }
            i=0;
            string p="",q="";
            while(str[i]!=','){
                p += str[i];
                i++;
            }
            i++; i++;
            while(i<str.size()){
                q += str[i];
                i++;
            }
            
           // cout<<a<<" "<<b<<" "<<c<<" "<<d<<endl;
            if((a/b) > (c/d)){
                return p;
            }
            else if(c/d > a/b){
                return q;
            }
            return "equal";
            
    }
};

************************************************************************************************************************************************
