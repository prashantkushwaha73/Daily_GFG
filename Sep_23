********************************************************************************************
**** Leftmost and rightmost nodes of binary tree ( 01/09/23 ) ****

void printCorner(Node *root)
{

   queue<Node*>  q;
   q.push(root);
   q.push(NULL);
   vector<int> v;
   Node* temp;
   while(!q.empty()){
       temp = q.front();
       q.pop();
       if(temp){
           v.push_back(temp->data);
           if(temp->left){
               q.push(temp->left);
           }
           if(temp->right){
               q.push(temp->right);
           }
       }
       else{
           if(v.size() == 1){
               cout<<v[0]<<" ";
           }
           else{
           cout<<v[0]<<" ";
           cout<<v[v.size()-1]<<" ";
           }
           v.clear();
           if(!q.empty()){
               q.push(NULL);
           }
       }
   }

}

************************************************************************************************
**** Leaf under budget ( 02/09/23 ) ****

class Solution
{
public:
    
    void solve(Node* root,vector<int>& v,int level){
        if(root == NULL){
            return;
        }
        if(root->left == NULL && root->right == NULL){
            v.push_back(level);
        }
        solve(root->left,v,level+1);
        solve(root->right,v,level+1);
    } 
   
    int getCount(Node *root, int k)
    {
        vector<int> v;
        solve(root,v,1);
        sort(v.begin(),v.end());
        int ans = 0;
        for(int i=0;i<v.size();i++){
            if(v[i] > k){
                break;
            }
            ans++;
            k -= v[i];
        }
        return ans;
    }
};

********************************************************************************************
**** Check if Tree is Isomorphic ( 03/09/23 ) ****

class Solution{
  public:
  
   void solve(Node* root1,Node* root2,bool& ans){
       if(root1->left == NULL && root1->right == NULL){
           if(root2->left || root2->right){
               ans = false;
               return;
           }
       }
       else if(root1->left && root1->right){
           if(root2->left == NULL || root2->right == NULL){
               ans = false;
               return;
           }
           if(root1->left->data == root2->left->data){
               if(root1->right->data != root2->right->data){
                   ans = false;
                   return;
               }
               solve(root1->left,root2->left,ans);
               if(ans == false){
                   ans = true;
                   Node* left = root2->left;
                   root2->left = root2->right;
                   root2->right = left;
               }
           }
           else{
               if(root1->left->data != root2->right->data || root1->right->data != root2->left->data){
                   ans = false;
                   return;
               }
               else{
                   Node* left = root2->left;
                   root2->left = root2->right;
                   root2->right = left;
               }
           }
       }
       else{
           if(root2->left == NULL && root2->right == NULL){
               ans = false;
               return;
           }
           else if(root2->left && root2->right){
               ans = false;
               return;
           }
           
           if(root1->left){
               if(root2->left){
                   if(root1->left->data != root2->left->data){
                       ans = false;
                       return;
                   }
               }
               else{
                   if(root1->left->data != root2->right->data){
                       ans = false;
                       return;
                   }
                   Node* left = root2->left;
                   root2->left = root2->right;
                   root2->right = left;
                   
               }
           }
           else{
                     if(root2->right){
                   if(root1->right->data != root2->right->data){
                       ans = false;
                       return;
                   }
               }
               else{
                   if(root1->right->data != root2->left->data){
                       ans = false;
                       return;
                   }
                   Node* left = root2->left;
                   root2->left = root2->right;
                   root2->right = left;
                   
               } 
           }
       }
       
       if(root1->left){
           solve(root1->left,root2->left,ans);
       }
       if(root2->right){
           solve(root1->right,root2->right,ans);
       }
   }
  
    // Return True if the given trees are isomotphic. Else return False.
    bool isIsomorphic(Node *root1,Node *root2)
    {
        if(root1){
            if(root2){
                if(root1->data != root2->data){
                    return false;
                }
            }
            else{
                return false;
            }
        }
        else{
            if(root2){
                return false;
            }
        }
        bool ans = true;
        solve(root1,root2,ans);
        return ans;
    }
};

*******************************************************************************************
**** Print adjacency list ( 05/09/23 ) ****

class Solution {
  public:
    // Function to return the adjacency list for each vertex.
    vector<vector<int>> printGraph(int V, vector<pair<int,int>>edges) {
        vector<vector<int>> ans(V);
        for(int i=0;i<edges.size();i++){
            ans[edges[i].first].push_back(edges[i].second);
            ans[edges[i].second].push_back(edges[i].first);
        }
        return ans;
    }
};

*********************************************************************************************
**** Binary Tree to BST ( 08/09/23 ) ****

class Solution{
  public:
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    void solve(Node* root,vector<int>& v,int& index){
        if(root == NULL){
            return;
        }
        solve(root->left,v,index);
        root->data = v[index];
        index++;
        solve(root->right,v,index);
    }
    
    void trav(Node* root,vector<int>& v){
        if(root == NULL){
            return;
        }
        v.push_back(root->data);
        trav(root->left,v);
        trav(root->right,v);
    }
    
    Node *binaryTreeToBST (Node *root)
    {
        vector<int> v;
        trav(root,v);
        sort(v.begin(),v.end());
        int index = 0;
        solve(root,v,index);
        return root;
    }
};

**********************************************************************************************************
**** Kth largest element in BST ( 09/09/23 ) ****

class Solution
{
    public:
    void solve(Node* root,int K,int& count,int& ans){
        if(root == NULL){
            return;
        }
        solve(root->right,K,count,ans);
        if(count == K){
            ans = root->data;
            count++;
            return;
        }
        else{
            count++;
        }
        solve(root->left,K,count,ans);
    }
    
    int kthLargest(Node *root, int K)
    {
        int ans , count = 1;
        solve(root,K,count,ans);
        return ans;
        
    }
};

**************************************************************************************
**** Perfect Numbers ( 12/09/23 ) ****

class Solution {
  public:
    int isPerfectNumber(long long N) {
        if(N == 1){
            return 0;
        }
        long long ans = 1;
        for(int i=2;i<=sqrt(N);i++){
            if(N%i == 0){
                ans += i;
                if(N/i < N){
                    ans += N/i;
                }
            }
        }
        if(ans == N){
            return 1;
        }
        return 0;
    }
};

***********************************************************************
**** Largest number possible ( 13/09/23 ) ****

class Solution{
public:
    string findLargest(int N, int S){
        if(S == 0 && N > 1){
            return "-1";
        }
      int count = 0;
      string ans = "";
      while(count < N){
          if(S >= 9){
              ans+="9";
              S -= 9;
              count++;
          }
          else if(S > 0){
              ans += to_string(S);
              S = 0;
              count++;
          }
          else{
              ans += "0";
              count++;
          }
      }
      if(S == 0){
      return ans; }
      else return "-1";
    }
};

*****************************************************************************************
