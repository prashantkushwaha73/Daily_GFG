********************************************************************************************
**** Leftmost and rightmost nodes of binary tree ( 01/09/23 ) ****

void printCorner(Node *root)
{

   queue<Node*>  q;
   q.push(root);
   q.push(NULL);
   vector<int> v;
   Node* temp;
   while(!q.empty()){
       temp = q.front();
       q.pop();
       if(temp){
           v.push_back(temp->data);
           if(temp->left){
               q.push(temp->left);
           }
           if(temp->right){
               q.push(temp->right);
           }
       }
       else{
           if(v.size() == 1){
               cout<<v[0]<<" ";
           }
           else{
           cout<<v[0]<<" ";
           cout<<v[v.size()-1]<<" ";
           }
           v.clear();
           if(!q.empty()){
               q.push(NULL);
           }
       }
   }

}

************************************************************************************************
**** Leaf under budget ( 02/09/23 ) ****

class Solution
{
public:
    
    void solve(Node* root,vector<int>& v,int level){
        if(root == NULL){
            return;
        }
        if(root->left == NULL && root->right == NULL){
            v.push_back(level);
        }
        solve(root->left,v,level+1);
        solve(root->right,v,level+1);
    } 
   
    int getCount(Node *root, int k)
    {
        vector<int> v;
        solve(root,v,1);
        sort(v.begin(),v.end());
        int ans = 0;
        for(int i=0;i<v.size();i++){
            if(v[i] > k){
                break;
            }
            ans++;
            k -= v[i];
        }
        return ans;
    }
};

********************************************************************************************
**** Check if Tree is Isomorphic ( 03/09/23 ) ****

class Solution{
  public:
  
   void solve(Node* root1,Node* root2,bool& ans){
       if(root1->left == NULL && root1->right == NULL){
           if(root2->left || root2->right){
               ans = false;
               return;
           }
       }
       else if(root1->left && root1->right){
           if(root2->left == NULL || root2->right == NULL){
               ans = false;
               return;
           }
           if(root1->left->data == root2->left->data){
               if(root1->right->data != root2->right->data){
                   ans = false;
                   return;
               }
               solve(root1->left,root2->left,ans);
               if(ans == false){
                   ans = true;
                   Node* left = root2->left;
                   root2->left = root2->right;
                   root2->right = left;
               }
           }
           else{
               if(root1->left->data != root2->right->data || root1->right->data != root2->left->data){
                   ans = false;
                   return;
               }
               else{
                   Node* left = root2->left;
                   root2->left = root2->right;
                   root2->right = left;
               }
           }
       }
       else{
           if(root2->left == NULL && root2->right == NULL){
               ans = false;
               return;
           }
           else if(root2->left && root2->right){
               ans = false;
               return;
           }
           
           if(root1->left){
               if(root2->left){
                   if(root1->left->data != root2->left->data){
                       ans = false;
                       return;
                   }
               }
               else{
                   if(root1->left->data != root2->right->data){
                       ans = false;
                       return;
                   }
                   Node* left = root2->left;
                   root2->left = root2->right;
                   root2->right = left;
                   
               }
           }
           else{
                     if(root2->right){
                   if(root1->right->data != root2->right->data){
                       ans = false;
                       return;
                   }
               }
               else{
                   if(root1->right->data != root2->left->data){
                       ans = false;
                       return;
                   }
                   Node* left = root2->left;
                   root2->left = root2->right;
                   root2->right = left;
                   
               } 
           }
       }
       
       if(root1->left){
           solve(root1->left,root2->left,ans);
       }
       if(root2->right){
           solve(root1->right,root2->right,ans);
       }
   }
  
    // Return True if the given trees are isomotphic. Else return False.
    bool isIsomorphic(Node *root1,Node *root2)
    {
        if(root1){
            if(root2){
                if(root1->data != root2->data){
                    return false;
                }
            }
            else{
                return false;
            }
        }
        else{
            if(root2){
                return false;
            }
        }
        bool ans = true;
        solve(root1,root2,ans);
        return ans;
    }
};

*******************************************************************************************
**** Print adjacency list ( 05/09/23 ) ****

class Solution {
  public:
    // Function to return the adjacency list for each vertex.
    vector<vector<int>> printGraph(int V, vector<pair<int,int>>edges) {
        vector<vector<int>> ans(V);
        for(int i=0;i<edges.size();i++){
            ans[edges[i].first].push_back(edges[i].second);
            ans[edges[i].second].push_back(edges[i].first);
        }
        return ans;
    }
};

*********************************************************************************************
**** Binary Tree to BST ( 08/09/23 ) ****

class Solution{
  public:
    // The given root is the root of the Binary Tree
    // Return the root of the generated BST
    void solve(Node* root,vector<int>& v,int& index){
        if(root == NULL){
            return;
        }
        solve(root->left,v,index);
        root->data = v[index];
        index++;
        solve(root->right,v,index);
    }
    
    void trav(Node* root,vector<int>& v){
        if(root == NULL){
            return;
        }
        v.push_back(root->data);
        trav(root->left,v);
        trav(root->right,v);
    }
    
    Node *binaryTreeToBST (Node *root)
    {
        vector<int> v;
        trav(root,v);
        sort(v.begin(),v.end());
        int index = 0;
        solve(root,v,index);
        return root;
    }
};

**********************************************************************************************************
**** Kth largest element in BST ( 09/09/23 ) ****

class Solution
{
    public:
    void solve(Node* root,int K,int& count,int& ans){
        if(root == NULL){
            return;
        }
        solve(root->right,K,count,ans);
        if(count == K){
            ans = root->data;
            count++;
            return;
        }
        else{
            count++;
        }
        solve(root->left,K,count,ans);
    }
    
    int kthLargest(Node *root, int K)
    {
        int ans , count = 1;
        solve(root,K,count,ans);
        return ans;
        
    }
};

**************************************************************************************
**** Perfect Numbers ( 12/09/23 ) ****

class Solution {
  public:
    int isPerfectNumber(long long N) {
        if(N == 1){
            return 0;
        }
        long long ans = 1;
        for(int i=2;i<=sqrt(N);i++){
            if(N%i == 0){
                ans += i;
                if(N/i < N){
                    ans += N/i;
                }
            }
        }
        if(ans == N){
            return 1;
        }
        return 0;
    }
};

***********************************************************************
**** Largest number possible ( 13/09/23 ) ****

class Solution{
public:
    string findLargest(int N, int S){
        if(S == 0 && N > 1){
            return "-1";
        }
      int count = 0;
      string ans = "";
      while(count < N){
          if(S >= 9){
              ans+="9";
              S -= 9;
              count++;
          }
          else if(S > 0){
              ans += to_string(S);
              S = 0;
              count++;
          }
          else{
              ans += "0";
              count++;
          }
      }
      if(S == 0){
      return ans; }
      else return "-1";
    }
};

*****************************************************************************************
**** Perfect Sum Problem ( 14/09/23 ) ****

class Solution{

	public:
	
int m=1000000007;
	int solve(int arr[],int n,int index,int sum,int count,vector<vector<int>>& v){
	    if(count == sum){
	        return 1;
	    }
	    if(index >= n || count > sum){
	        return 0;
	    }
	    if(v[index][count] != -1){
	        return v[index][count];
	    }
	  
	   int pick= solve(arr,n,index+1,sum,arr[index]+count,v);
	   int notpick= solve(arr,n,index+1,sum,count,v);
	    return v[index][count]=(pick+notpick)%m;
	}
	
	int perfectSum(int arr[], int n, int sum)
	{
        vector<vector<int>> v(n,vector<int> (sum+1,-1));
        sort(arr,arr+n);
        return solve(arr,n,0,sum,0,v);
	}
	  
};

***********************************************************************************************
**** Partition Equal Subset Sum ( 15/09/23 ) ****

class Solution{
    
    int solve(int index,int N,int arr[],int sum,int target,vector<vector<int>>& dp){
        if(sum == target){
             return 1;
        
        }
        if(index >= N || sum > target){
            return 0;
        }
        if(dp[index][sum] != -1){
            return dp[index][sum];
        }
        int inc = solve(index+1,N,arr,sum+arr[index],target,dp);
        int exc = solve(index+1,N,arr,sum,target,dp);
        
        if(inc == 1 || exc == 1){
           dp[index][sum] = 1;
        }
        else{
            dp[index][sum] = 0;
        }
        return dp[index][sum];
    }
    
public:
    int equalPartition(int N, int arr[])
    {
        int total = 0;
        for(int i=0;i<N;i++){
            total += arr[i];
        }
        if(total%2){
            return false;
        }
        vector<vector<int>> dp(N+1,vector<int> ((total/2)+1,-1));
        return solve(0,N,arr,0,total/2,dp);
    }
};

*********************************************************************************************
**** Count number of hops ( 16/09/23 ) ****

class Solution
{
    public:
     long long solve(int count,int n,vector<int>& dp){
         if(count == n){
             return 1;
         }
         if(count > n){
             return 0;
         }
         if(dp[count] != -1){
             return dp[count];
         }
         long long one = solve(count+1,n,dp) % 1000000007;
         long long two = solve(count+2,n,dp) % 1000000007; 
         long long three = solve(count+3,n,dp) % 1000000007;
         return dp[count] = (one + two + three) % 1000000007;
         
     }
    long long countWays(int n)
    {
        vector<int> dp(n+1,-1);
        return solve(0,n,dp);
    }
};

****************************************************************************************************
**** Print first n Fibonacci Numbers ( 17/09/23 ) ****

class Solution
{
    public:
    
    long long solve(int n,vector<long long>& dp){
        if(dp[n] != -1){
            return dp[n];
        }
        return dp[n] = solve(n-1,dp)+solve(n-2,dp);
    }
    
    vector<long long> printFibb(int n) 
    {
        if(n==1){
            return {1};
        }
        if(n==2){
            return {1,1};
        }
        vector<long long> dp(n+1,-1);
        dp[1] = 1;
        dp[2] = 1;
        dp[n] = solve(n,dp);
        vector<long long> ans;
        for(int i=1;i<dp.size();i++){
            ans.push_back(dp[i]);
        }
        return ans;
    }
};

*********************************************************************************
**** Power of 2 ( 18/09/23 ) ****

class Solution{
    public:
    // Function to check if given number n is a power of two.
    bool isPowerofTwo(long long n){
        
        if( n == 0 ){
            return false;
        }
        
        while(1){
            if(n == 1){
                return true;
            }
            
            if(n%2){
                return false;
            }
            n/=2;
        }
        return true;
    }
};

****************************************************************************************
**** Find first set bit ( 19/08/23 ) ****

class Solution
{
    public:
    //Function to find position of first set bit in the given number.
    unsigned int getFirstSetBit(int n)
    {
        int ans = 1;
        while(n){
            if(n%2){
                return ans;
            }
            ans++;
            n/=2;
        }
        return 0;
    }
};

***************************************************************************************************
**** Stickler Thief ( 21/09/23 ) ****

class Solution
{
    public:
    
    int solve(int arr[],int n,int index,vector<int>& dp){
        if(index >= n){
            return 0;
        }
        if (dp[index] != -1){
            return dp[index];
        }
        
        int inc = arr[index] + solve(arr,n,index+2,dp);
        int exc = solve(arr,n,index+1,dp);
        
        return dp[index] = max(inc,exc);
    }
    
    int FindMaxSum(int arr[], int n)
    {
        vector<int> dp(n,-1);
        return solve(arr,n,0,dp);
    }
};

*****************************************************************************************************
**** First and last occurrences of x ( 22/09/23 ) ****


int left(int arr[],int n,int x){
    int s=0,e=n-1,mid;
    while(s<e){
        mid=s+(e-s)/2;
        if(arr[mid]==x){
            e=mid;
        }
        else if(arr[mid]>x){
            e=mid-1;
        }
        else{
            s=mid+1;
        }
        if(e-1 ==s){
            break;
        }
    }
    if(arr[s]==x){
        return s;
    }
    else if(arr[e]==x){
        return e;
    }
    else{
        return -1;
    }
}

int right(int arr[],int n,int x){
    int s=0,e=n-1,mid;
    while(s<e){
        mid=s+(e-s)/2;
        if(arr[mid]==x){
            s=mid;
        }
        else if(arr[mid]>x){
            e=mid-1;
        }
        else{
            s=mid+1;
        }
         if(e-1 ==s){
            break;
        }
    }
     if(arr[e]==x){
        return e;
    }
    else if(arr[s]==x){
        return s;
    }
    else{
        return -1;
    }
}
vector<int> find(int arr[], int n , int x )
{
 vector<int> ans; 
 ans.push_back(left(arr,n,x));
 ans.push_back(right(arr,n,x));
 return ans;
}

*********************************************************************************************************
**** Equilibrium Point ( 23/09/23 ) ****

class Solution{
    public:
    // Function to find equilibrium point in the array.
    // a: input array
    // n: size of array
    int equilibriumPoint(long long a[], int n) {
    
       long long sum  = 0,count = 0;
       for(int i=0;i<n;i++){
           sum += a[i];
       }
       for(int i=0;i<n;i++){
           if(count == (sum-count-a[i])){
               return i+1;
           }
           count += a[i];
       }
       return -1;
    }
};

**********************************************************************************************************
**** Find duplicates in an array ( 24/09/23 ) ****

class Solution{
  public:
    vector<int> duplicates(int arr[], int n) {
        sort(arr,arr+n);
        vector<int> ans;
        int i = 0;
        while(i<n){
            if(i+1 < n){
                if(arr[i] == arr[i+1]){
                    if(ans.size()){
                        if(ans[ans.size()-1] != arr[i]){
                            ans.push_back(arr[i]);
                            i++;
                        }
                        else{
                            i++;
                        }
                    }
                    else{
                        ans.push_back(arr[i]);
                            i++;
                    }
                }
                else{
                    i++;
                }
            }
            else{
                i++;
            }
        }
        if(ans.size()){
            return ans;
        }
        return {-1};
    }
};

*********************************************************************************************************
