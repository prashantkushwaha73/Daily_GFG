***************************************************************************************************
**** DFS of Graph ( 01/08/23 ) ****

class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    void dfs(vector<int> adj[],unordered_map<int,bool>& m,vector<int>& ans,int n){
        for(int i=0;i<adj[n].size();i++){
            if(m[adj[n][i]]==false){
                m[adj[n][i]]=true;
                ans.push_back(adj[n][i]);
                dfs(adj,m,ans,adj[n][i]);
            }
        }
    }
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        unordered_map<int,bool> m;
        vector<int> ans;
        for(int i=0;i<V;i++){
            if(m[i]==false){
                m[i]=true;
                ans.push_back(i);
                dfs(adj,m,ans,i);
            }
        }
        return ans;
    }
};

*******************************************************************************************
