*****************************************************************
**** Array Operations ( 12/5/23 ) ****

class Solution {
  public:
    int arrayOperations(int n, vector<int> &arr) {
        int ans=0,count=0,j=0;
        while(j<arr.size()){
            if(arr[j]!=0){
                j++;
                count++;
            }
            else if(arr[j]==0){
                if(count!=0){
                    ans++;
                    j++;
                    count=0;
                }
                else{
                    j++;
                }
            }
        }
        if(count){
            ans++;
        }
        return ans;
    }
};

*****************************************************************************************
**** Bit Magic ( 13/5/23 ) ****

class Solution {
  public:
    int bitMagic(int n, vector<int> &arr) {
        int i=0,j=arr.size()-1,count=0;
        while(i<j){
            if(arr[i]!=arr[j]){
                count++;
                i++; j--;
            }
            
            else{
                i++; j--;
            }
        }
        if(count%2){
            return (count/2)+1;
        }
        else{
            return count/2;
        }
    }
};

*********************************************************************************************
**** Hands of Straights ( 20/05/23 ) ****

class Solution {
  public:
    bool isStraightHand(int N, int groupSize, vector<int> &hand) {
        if(N%groupSize){
            return false;
        }
          unordered_map<int,int> count;
          for(int i=0;i<N;i++){
              count[hand[i]]++;
          }
          sort(hand.begin(),hand.end());
          int s=0,e,k,temp;
          while(s<N){
              e=hand[s];
              k=groupSize;
              while(k){
                 count[e]--;
                 k--;
                 e++;
                 if(k && count[e]==0){
                     return false;
                 }
                 
              }
              s++;
              while( s<N && count[hand[s]]==0){
                  s++;
              }
          }
          return true;
    }
};

********************************************************************************************
**** Bus Conductor ( 21/5/23 ) ****

class Solution {
  public:
    int findMoves(int n, vector<int> chairs, vector<int> passengers) {
        sort(chairs.begin(),chairs.end());
        sort(passengers.begin(),passengers.end());
        int ans=0;
        for(int i=0;i<chairs.size();i++){
            ans+=(abs(passengers[i]-chairs[i]));
        }
        
        return ans;
    }
};

*********************************************************************************************************
**** Maximum Identical Bowls ( 24/05/23 ) ****

class Solution {
  public:
    int getMaximum(int N, vector<int> &arr) {
        
        long long int count=0;
        for(int i=0;i<N;i++){
            count+=arr[i];
        }
        while(count%N){
            N--;
        }
        return N;
    }
};

***********************************************************************************************************
