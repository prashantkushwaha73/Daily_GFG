*************************************************************************************************************************************
**** Minimum Absolute Difference In BST ( 02/04/24 ) ****

class Solution
{
    public:
    
    void solve(Node* root,int& a,int& ans){
        if(root==NULL){
            return;
        }
        solve(root->left,a,ans);
        if(root->data != a){
            ans = min(ans,abs(a-root->data));
            a=root->data;
        }
        solve(root->right,a,ans);
    }
    
    int absolute_diff(Node *root)
    {
        int ans = INT_MAX;
        int a = root->data;
        Node* temp = root;
        while(temp->left){
            temp = temp->left;
            a = temp->data;
        }
        solve(root,a,ans);
        return ans;
    }
};

*********************************************************************************************************************************
**** Optimal Strategy For A Game ( 08/04/24 ) ****

class Solution{
    public:
    
    long long solve(int i,int j,int n,int arr[],vector<vector<long long>>& dp){
        if(i>j){
            return 0;
        }
            if(dp[i][j]!=-1){
                return dp[i][j];
            }
            if(i==j){
                return arr[i];
            }
            
            long long left,right,a,b,c,d;
    
                
                    a = arr[i] + solve(i+2,j,n,arr,dp);
                
                
                   b = arr[i] + solve(i+1,j-1,n,arr,dp);
                   
                   left = min(a,b);
            
                
                    c = arr[j] + solve(i,j-2,n,arr,dp);
        
        
                   d = arr[j] + solve(i+1,j-1,n,arr,dp);
                   
                   right = min(c,d);
                
        return dp[i][j] = max(left,right);
    }
    
    long long maximumAmount(int n, int arr[]){
        vector<vector<long long>> dp(n,vector<long long> (n,-1));
        return solve(0,n-1,n,arr,dp);
    }
};

********************************************************************************************************************************
**** Party of Couples ( 10/04/24 ) ****

class Solution{
    public:
    int findSingle(int n, int arr[]){
        sort(arr,arr+n);
        int v=arr[0],count=0;
        for(int i=0;i<n;i++){
           if(arr[i]==v){
               count++;
           }
           else{
               if(count%2){
                   return v;
               }
               v=arr[i];
               count=1;
           }
        }
        if(count%2){
                   return v;
               }
        return -1;
    }
};

**************************************************************************************************************************
**** Find missing in second array ( 19/04/24 ) ****

class Solution{
	public:
	vector<int> findMissing(int a[], int b[], int n, int m) 
	{ 
	    unordered_map<int,bool> mp;
	    for(int i=0;i<m;i++){
	        mp[b[i]]=true;
	    }
	    vector<int> ans;
	    for(int i=0;i<n;i++){
	        if(mp[a[i]]==false){
	            ans.push_back(a[i]);
	        }
	    }
	    return ans;
	} 
};

************************************************************************************************************************************
**** Union of Two Sorted Arrays ( 20/04/24 ) ****

class Solution{
    public:
    //arr1,arr2 : the arrays
    // n, m: size of arrays
    //Function to return a list containing the union of the two arrays. 
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        int i =0,j=0;
        vector<int> ans;
        while(i<n && j<m){
            if(arr1[i]==arr2[j]){
                ans.push_back(arr1[i]);
                i++; j++;
            }
            else if(arr1[i]<arr2[j]){
                ans.push_back(arr1[i]);
                i++;
            }
            else{
                ans.push_back(arr2[j]);
                j++;
            }
        }
        while(i<n){
            ans.push_back(arr1[i]);
                i++;
        }
        while(j<m){
            ans.push_back(arr2[j]);
                j++;
        }
        vector<int> f;
        for(int i=0;i<ans.size();i++){
            if(f.size()){
                if(f[f.size()-1]!=ans[i]){
                    f.push_back(ans[i]);
                }
            }
            else{
                f.push_back(ans[i]);
            }
        }
        return f;
    }
};

********************************************************************************************************************************
**** Three way partitioning ( 21/04/24 ) ****

class Solution{   
public:
    //Function to partition the array around the range such 
    //that array is divided into three parts.
    void threeWayPartition(vector<int>& array,int a, int b)
    {
        vector<int> v1;
        for(int i=0;i<array.size();i++){
            if(array[i]<a){
                v1.push_back(array[i]);
            }
        }
        for(int i=0;i<array.size();i++){
            if(array[i]>=a && array[i]<=b){
                v1.push_back(array[i]);
            }
        }
        for(int i=0;i<array.size();i++){
            if(array[i]>b){
                v1.push_back(array[i]);
            }
        }
        array = v1;
    }
};

*********************************************************************************************************************************
**** Row with minimum number of 1's ( 22/04/24 ) ****

class Solution {
  public:
    int minRow(int n, int m, vector<vector<int>> a) {
        int count;
        for(int i=0;i<n;i++){
            count = 0;
            for(int j=0;j<m;j++){
                count+=a[i][j];
                a[i][j]=count;
            }
        }
        int ans = a[0][m-1];
        int r = 0;
        for(int i=0;i<n;i++){
            if(a[i][m-1] < ans){
                ans = a[i][m-1];
                r = i;
            }
        }
        return r+1;
    }
};

***************************************************************************************************************************************
**** Paths to reach origin ( 24/04/24 ) ****

class Solution
{
public:
    int solve(int x,int y,vector<vector<int>>& dp){
        if(x==0 && y==0){
            return 1;
        }
        if(dp[x][y]!=-1){
            return dp[x][y];
        }
        int v=0;
        if(x>0){
            v = v%1000000007 + solve(x-1,y,dp)%1000000007;
        }
        if(y>0){
            v = v%1000000007 + solve(x,y-1,dp)%1000000007;
        }
        return dp[x][y] = v%1000000007;
    }

    int ways(int x, int y)
    {
       vector<vector<int>> dp(x+1,vector<int> (y+1,-1));
       return solve(x,y,dp);
    }
};

*************************************************************************************************************************************
**** Exit Point in a Matrix ( 26/04/24 ) ****

class Solution {
  public:
    vector<int> FindExitPoint(int n, int m, vector<vector<int>>& matrix) {
        char dir = 'r';
        int x=0,y=0;
        while(1){
            if(dir=='r'){
                if(matrix[x][y]==0){
                    if(y+1 < m){
                        y++;
                    }
                    else{
                        return {x,y};
                    }
                }
                else{
                    if(x+1 < n){
                        matrix[x][y]=0;
                        x++;
                        dir = 'd';
                    }
                    else{
                        return {x,y};
                    }
                }
            }
            if(dir=='l'){
                if(matrix[x][y]==0){
                    if(y-1 >= 0){
                        y--;
                    }
                    else{
                        return {x,y};
                    }
                }
                else{
                    if(x-1 >= 0){
                        matrix[x][y]=0;
                        x--;
                        dir = 'u';
                    }
                    else{
                        return {x,y};
                    }
                }
            }
            if(dir=='u'){
                if(matrix[x][y]==0){
                    if(x-1 >= 0){
                        x--;
                    }
                    else{
                        return {x,y};
                    }
                }
                else{
                    if(y+1 < m){
                        matrix[x][y]=0;
                        y++;
                        dir = 'r';
                    }
                    else{
                        return {x,y};
                    }
                }
            }
            if(dir=='d'){
                if(matrix[x][y]==0){
                    if(x+1 < n){
                        x++;
                    }
                    else{
                        return {x,y};
                    }
                }
                else{
                    if(y-1 >= 0){
                        matrix[x][y]=0;
                        y--;
                        dir = 'l';
                    }
                    else{
                        return {x,y};
                    }
                }
            }
        }
        return {-1,-1};
    }
};

*******************************************************************************************************************************************
