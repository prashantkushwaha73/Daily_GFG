*************************************************************************************************************************************
**** Minimum Absolute Difference In BST ( 02/04/24 ) ****

class Solution
{
    public:
    
    void solve(Node* root,int& a,int& ans){
        if(root==NULL){
            return;
        }
        solve(root->left,a,ans);
        if(root->data != a){
            ans = min(ans,abs(a-root->data));
            a=root->data;
        }
        solve(root->right,a,ans);
    }
    
    int absolute_diff(Node *root)
    {
        int ans = INT_MAX;
        int a = root->data;
        Node* temp = root;
        while(temp->left){
            temp = temp->left;
            a = temp->data;
        }
        solve(root,a,ans);
        return ans;
    }
};

*********************************************************************************************************************************
**** Optimal Strategy For A Game ( 08/04/24 ) ****

class Solution{
    public:
    
    long long solve(int i,int j,int n,int arr[],vector<vector<long long>>& dp){
        if(i>j){
            return 0;
        }
            if(dp[i][j]!=-1){
                return dp[i][j];
            }
            if(i==j){
                return arr[i];
            }
            
            long long left,right,a,b,c,d;
    
                
                    a = arr[i] + solve(i+2,j,n,arr,dp);
                
                
                   b = arr[i] + solve(i+1,j-1,n,arr,dp);
                   
                   left = min(a,b);
            
                
                    c = arr[j] + solve(i,j-2,n,arr,dp);
        
        
                   d = arr[j] + solve(i+1,j-1,n,arr,dp);
                   
                   right = min(c,d);
                
        return dp[i][j] = max(left,right);
    }
    
    long long maximumAmount(int n, int arr[]){
        vector<vector<long long>> dp(n,vector<long long> (n,-1));
        return solve(0,n-1,n,arr,dp);
    }
};

********************************************************************************************************************************
**** Party of Couples ( 10/04/24 ) ****

class Solution{
    public:
    int findSingle(int n, int arr[]){
        sort(arr,arr+n);
        int v=arr[0],count=0;
        for(int i=0;i<n;i++){
           if(arr[i]==v){
               count++;
           }
           else{
               if(count%2){
                   return v;
               }
               v=arr[i];
               count=1;
           }
        }
        if(count%2){
                   return v;
               }
        return -1;
    }
};

*****************************************************************************************************************************
