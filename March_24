*****************************************************************************************************************
**** Peak element ( 01/03/24 ) ****

class Solution
{
    public:
    int peakElement(int arr[], int n)
    {
        if(n==1){
            return 0;
        }
       for(int i=0;i<n;i++){
           if(i==0 && arr[1]<=arr[0]){
               return 0;
           }
           else if(i==n-1 && arr[n-2]<=arr[n-1]){
               return n-1;
           }
           else{
               if(arr[i-1]<=arr[i] && arr[i+1]<=arr[i]){
                   return i;
               }
           }
       }
       return -1;
    }
};

****************************************************************************************************************************************
**** First element to occur k times ( 03/02/24 ) ****

class Solution{
    public:
    int firstElementKTime(int n, int k, int a[])
    {
        unordered_map<int,int> m;
        for(int i=0;i<n;i++){
            m[a[i]]++;
            if(m[a[i]]>=k){
                return a[i];
            }
        }
        return -1;
    }
};

*******************************************************************************************************************************************
**** Remove all duplicates from a given string ( 03/10/24 ) ****

class Solution{
public:
	string removeDuplicates(string str) {
	    unordered_map<char,bool> m;
	    string ans = "";
	    for(int i=0;i<str.size();i++){
	        if(m[str[i]]==false){
	            ans.push_back(str[i]);
	            m[str[i]]=true;
	        }
	    }
	    return ans;
	}
};

*****************************************************************************************************************************************
**** Count pairs Sum in matrices ( 11/03/24 ) ****

class Solution{
public:	
	int countPairs(vector<vector<int>> &mat1, vector<vector<int>> &mat2, int n, int x)
	{
	    int ans = 0;
	    int a=0,b=0,c=n-1,d=n-1;
	    while(a<n && c>=0){
	        if(mat1[a][b]+mat2[c][d] == x){
	            ans++;
	            if(b==n-1){
	                b=0; a++;
	            }
	            else{
	                b++;
	            }
	            if(d==0){
	                d=n-1; c--;
	            }
	            else{
	                d--;
	            }
	        }
	        else if(mat1[a][b]+mat2[c][d] > x){
	            if(d==0){
	                d=n-1; c--;
	            }
	            else{
	                d--;
	            }
	        }
	        else{
	            if(b==n-1){
	                b=0; a++;
	            }
	            else{
	                b++;
	            }
	        }
	    }
	    return ans;
	}
};

***********************************************************************************************************************************
**** Print matrix in diagonal pattern ( 13/03/24 ) ****

class Solution{
  public:
     void solve(vector<vector<int>>&mat,int& x,int& y,bool& flag,vector<int>& ans){
        int r = mat.size(), c = mat[0].size();
        ans.push_back(mat[x][y]);
        if(flag){
            if(x-1>=0 && y+1<=c-1){
                x--; y++;
            }
            else{
                if( x==0 && y+1<c){
                    y++;
                    flag=false;
                }
                else if(y==c-1 && x+1<r){
                    x++;
                    flag=false;
                }
            }
        }
        else{
            if(x+1 < r && y-1 >=0){
                x++; y--;
            }
            else{
                if(y==0 && x+1<r){
                    x++;
                    flag = true;
                }
                else if(x==r-1 && y+1<c){
                    y++;
                    flag = true;
                }
            }
        }
    }
    vector<int> matrixDiagonally(vector<vector<int>>&mat)
    {
        vector<int> ans;
         int count  = 0;
         int last = pow(mat.size(),2);
         int x = 0,y = 0;
         bool flag = true;
         while(count<last){
             solve(mat,x,y,flag,ans);
             count++;
         }
         return ans;
    }
};

***************************************************************************************************************************************
**** Level order traversal ( 18/03/24 ) ****

class Solution
{
    public:
    //Function to return the level order traversal of a tree.
    vector<int> levelOrder(Node* root)
    {
       vector<int> ans;
       queue<Node*> q;
       q.push(root);
       int n;
       while(!q.empty()){
           n = q.size();
           while(n){
               ans.push_back(q.front()->data);
               if(q.front()->left){
                   q.push(q.front()->left);
               }
               if(q.front()->right){
                   q.push(q.front()->right);
               }
               q.pop();
               n--;
           }
       }
       return ans;
    }
};

********************************************************************************************************************************
