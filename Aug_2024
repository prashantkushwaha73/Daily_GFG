***************************************************************************************************************************************************
**** N meetings in one room ( 04/08/24 ) ****

class Solution {
  public:
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    int maxMeetings(int n, int start[], int end[]) {
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++){
            v.push_back({start[i],end[i]});
        }
        sort(v.begin(),v.end());
        int s = v[0].first, e = v[0].second,ans =1;
        for(int i=1;i<n;i++){
            if(v[i].first > e){
                ans++;
                s = v[i].first; e = v[i].second;
            }
            else{
                if(v[i].second <= e){
                    s = v[i].first; e = v[i].second;
                }
            }
        }
        return ans;
    }
};

****************************************************************************************************************************************************************************************
**** Sorting Elements of an Array by Frequency ( 28/08/24 ) ****

class Solution {
  public:
    // Complete this function
    // Function to sort the array according to frequency of elements.
    
    class Compare {
public:
    bool operator()(pair<int,int> below, pair<int,int> above)
    {
        if (above.second > below.second) {
            return true;
        }
        else if (below.second == above.second
                 && below.first > above.first) {
            return true;
        }

        return false;
    }
};

   
    
    vector<int> sortByFreq(vector<int>& arr) {
        unordered_map<int,int> m;
        for(int i=0;i<arr.size();i++){
            m[arr[i]]++;
        }
        priority_queue<pair<int,int>, vector<pair<int,int>>, Compare> pq;
        for(auto i:m){
            pq.push({i.first,i.second});
        }
        vector<int> ans;
        int a,b;
        while(!pq.empty()){
            a = pq.top().first; b = pq.top().second;
            while(b){
                ans.push_back(a);
                b--;
            }
            pq.pop();
        }
        return ans;
    }
};

*********************************************************************************************************************************************************************
