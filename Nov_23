***********************************************************************************************************
**** Frequencies of Limited Range Array Elements ( 01/11/23 ) ****

class Solution{
    public:
    //Function to count the frequency of all elements from 1 to N in the array.
    void frequencyCount(vector<int>& arr,int N, int P)
    { 
        vector<int> v(N,0);
        for(int i=0;i<N;i++){
            if(arr[i] > 0 && arr[i] <= N){
                v[arr[i]-1]++;
            }
        }
        arr = v;
    }
};

************************************************************************************************************ 
**** Minimum distance between two numbers ( 02/11/23 ) ****

class Solution{
  public:
  
 void rev(int arr[],int n){
     int i = 0,j = n-1;
     while(i<j){
         swap(arr[i],arr[j]);
         i++; j--;
     }
 }
   
    bool check(int arr[],int n,int v){
        for(int i=0;i<n;i++){
            if(arr[i] == v){
                return true;
            }
        }
        return false;
    }
    

  
    int minDist(int arr[], int n, int x, int y) {
        if(check(arr,n,x)==false || check(arr,n,y)==false){
            return -1;
        }
        int ans = INT_MAX;
        int a =0,b=0;
        while(b<n){
            while(b<n && arr[b]!=y){
                b++;
            }
            while(b<n && a<b){
                if(arr[a]==x){
                    ans = min(ans,abs(b-a));
                }
                a++;
            }
            b++;
        }
        
        rev(arr,n);
        a =0,b=0;
        while(b<n){
            while(b<n && arr[b]!=y){
                b++;
            }
            while(b<n && a<b){
                if(arr[a]==x){
                    ans = min(ans,abs(b-a));
                }
                a++;
            }
            b++;
        }
        return ans;
    }
};

**********************************************************************************************************
**** Find Transition Point ( 04/11/23 ) ****

class Solution
{
public:    
    
    int transitionPoint(int arr[], int n) {
        int ans = -1,i=0,j=n-1,mid;
        while(i<=j){
            if(i==j){
                if(arr[i]==1){
                    return i;
                }
                else{
                    return ans;
                }
            }
            mid = i + (j-i)/2;
            if(arr[mid] == 1){
                ans = mid;
                j = mid;
            }
            else{
                i = mid+1;
            }
        }
        return ans;
    }
};

*********************************************************************************************
**** Top K Frequent Elements in Array - | ( 05/11/23 ) ****

class Solution {
  public:
    vector<int> topK(vector<int>& nums, int k) {
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        priority_queue<pair<int,int>> pq;
        for(auto i : m){
            pq.push({i.second,i.first});
        }
        vector<int> ans;
        for(int i=0;i<k;i++){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }
};

************************************************************************************************
**** Sum of upper and lower triangles ( 07/11/23 ) ****

class Solution
{   
    public:
    //Function to return sum of upper and lower triangles of a matrix.
    vector<int> sumTriangles(const vector<vector<int> >& matrix, int n)
    {
        vector<int> ans(2,0);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(j<=i){
                    ans[1]+=matrix[i][j];
                }
                if(j>=i){
                    ans[0]+=matrix[i][j];
                }
            }
        }
        return ans;
    }
};

*************************************************************************************************
**** Print Matrix in snake Pattern ( 08/11/23 ) ****

class Solution
{   
    public:
    //Function to return list of integers visited in snake pattern in matrix.
    vector<int> snakePattern(vector<vector<int> > matrix)
    {   
        bool flag = true;
        
        vector<int> ans;
        for(int i=0;i<matrix.size();i++){
            if(flag){
                for(int j=0;j<matrix.size();j++){
                    ans.push_back(matrix[i][j]);
                }
                flag = false;
            }
            else{
                for(int j=matrix.size()-1;j>=0;j--){
                    ans.push_back(matrix[i][j]);
                }
                flag = true;
            }
        }
        return ans;
    }
};

**************************************************************************************************
**** Predict the Column ( 09/11/23 ) ****

class Solution{
    public:
    /*Function to count zeros in each column
    * N : Number of rows and columns in array
    M is the matrix that is globally declared
    */
    int columnWithMaxZeros(vector<vector<int>>arr,int N){
        
        int ans = -1,t=0,count;
        for(int j=0;j<N;j++){
            count = 0;
            for(int i=0;i<N;i++){
                if(arr[i][j] == 0){
                    count++;
                }
            }
            if(count > t){
                t = count;
                ans = j;
            }
        }
        return ans;
    }
};

*************************************************************************************************************
**** Isomorphic Strings  ( 11/11/23 ) ****

class Solution
{
    public:
    //Function to check if two strings are isomorphic.
    bool areIsomorphic(string str1, string str2)
    {
        
        if(str1.size() != str2.size()){
            return false;
        }
        unordered_map<char,char> m;
        unordered_map<char,bool> check;
        unordered_map<char,bool> v;
        for(int i=0;i<str1.size();i++){
            if(check[str1[i]]){
                if(m[str1[i]] != str2[i]){
                    return false;
                }
            }
            else{
                if(v[str2[i]]){
                    return false;
                }
                check[str1[i]]=true;
                v[str2[i]]=true;
                m[str1[i]]=str2[i];
            }
        }
        return true;
    }
};

***********************************************************************************************************
**** Check if strings are rotations of each other or not ( 14/11/23 ) ****

class Solution
{
    public:
    //Function to check if two strings are rotations of each other or not.
    bool areRotations(string s1,string s2)
    {
        if(s1.size() != s2.size()){
            return false;
        }
        for(int i=0;i<s1.size();i++){
            if(s2[0] == s1[i] && s1.substr(i,s1.size()-i)+s1.substr(0,i) == s2){
                return true;
            }
        }
        return false;
    }
};

***********************************************************************************************
**** Reverse a Doubly Linked List ( 18/11/23 ) ****

class Solution
{
    public:
    Node* reverseDLL(Node * head)
    {
        Node* last = head;
        while(last->next){
            last = last->next;
        }
        Node* first = head;
        while(first != last){
            swap(first->data,last->data);
            if(first->next == last){
                break;
            }
            first = first->next;
            last = last->prev;
        }
        return head;
    }
};

*************************************************************************************************************
**** Intersection of two sorted Linked lists ( 19/11/23 ) ****

class Solution
{
    public:
    Node* findIntersection(Node* head1, Node* head2)
    {
        Node* first = head1;
        Node* second = head2;
        Node* ans = new Node(-1);
        Node* temp = ans;
        while(first && second){
            if(first->data == second->data){
                Node* pemp = new Node(first->data);
                temp->next = pemp;
                temp = pemp;
                first=first->next;
                second=second->next;
            }
            else if(first->data < second->data){
                first=first->next;
            }
            else{
                second=second->next;
            }
        }
        return ans->next;
    }
};

****************************************************************************************************
**** Determine if Two Trees are Identical ( 21/11/23 ) ****

class Solution
{
    private: 
    bool solve(Node* r1,Node* r2){
        if(r1==NULL && r2==NULL){
            return true;
        }
        if(r1==NULL && r2!=NULL){
            return false;
        }
        if(r1!=NULL && r2==NULL){
            return false;
        }
        bool check=r1->data == r2->data;
        bool left=solve(r1->left,r2->left);
        bool right=solve(r1->right,r2->right);
        return (check && left && right);
    }
    public:
    //Function to check if two trees are identical.
    bool isIdentical(Node *r1, Node *r2)
    {
        return solve(r1,r2);
    }
};

********************************************************************************************************
**** Pascal Triangle ( 24/11/23 ) ****

class Solution{
public:
    vector<long long> nthRowOfPascalTriangle(int n) {
        vector<long long> v1 = {1};
        vector<long long> v2;
        int mod = 1e9+7;
        while(n>1){
            v2.push_back(1);
            for(int i=0;i<v1.size()-1;i++){
                v2.push_back((v1[i]+v1[i+1])%mod);
            }
            v2.push_back(1);
            v1 = v2;
            v2.clear();
            n--;
        }
        return v1;
    }
};

************************************************************************************************
**** Print Pattern ( 26/11/23 ) ****

class Solution{
public:
    vector<int> pattern(int N){
         vector<int> ans;
         int v = N;
         if(v<=0){
             ans.push_back(v);
             return ans;
         }
         while(v>0){
             ans.push_back(v);
             v-=5;
         }
         while(v<=N){
             ans.push_back(v);
             v+=5;
         }
         return ans;
    }
};

****************************************************************************************************
