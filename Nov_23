***********************************************************************************************************
**** Frequencies of Limited Range Array Elements ( 01/11/23 ) ****

class Solution{
    public:
    //Function to count the frequency of all elements from 1 to N in the array.
    void frequencyCount(vector<int>& arr,int N, int P)
    { 
        vector<int> v(N,0);
        for(int i=0;i<N;i++){
            if(arr[i] > 0 && arr[i] <= N){
                v[arr[i]-1]++;
            }
        }
        arr = v;
    }
};

************************************************************************************************************ 
**** Minimum distance between two numbers ( 02/11/23 ) ****

class Solution{
  public:
  
 void rev(int arr[],int n){
     int i = 0,j = n-1;
     while(i<j){
         swap(arr[i],arr[j]);
         i++; j--;
     }
 }
   
    bool check(int arr[],int n,int v){
        for(int i=0;i<n;i++){
            if(arr[i] == v){
                return true;
            }
        }
        return false;
    }
    

  
    int minDist(int arr[], int n, int x, int y) {
        if(check(arr,n,x)==false || check(arr,n,y)==false){
            return -1;
        }
        int ans = INT_MAX;
        int a =0,b=0;
        while(b<n){
            while(b<n && arr[b]!=y){
                b++;
            }
            while(b<n && a<b){
                if(arr[a]==x){
                    ans = min(ans,abs(b-a));
                }
                a++;
            }
            b++;
        }
        
        rev(arr,n);
        a =0,b=0;
        while(b<n){
            while(b<n && arr[b]!=y){
                b++;
            }
            while(b<n && a<b){
                if(arr[a]==x){
                    ans = min(ans,abs(b-a));
                }
                a++;
            }
            b++;
        }
        return ans;
    }
};

**********************************************************************************************************
**** Find Transition Point ( 04/11/23 ) ****

class Solution
{
public:    
    
    int transitionPoint(int arr[], int n) {
        int ans = -1,i=0,j=n-1,mid;
        while(i<=j){
            if(i==j){
                if(arr[i]==1){
                    return i;
                }
                else{
                    return ans;
                }
            }
            mid = i + (j-i)/2;
            if(arr[mid] == 1){
                ans = mid;
                j = mid;
            }
            else{
                i = mid+1;
            }
        }
        return ans;
    }
};

*********************************************************************************************
**** Top K Frequent Elements in Array - | ( 05/11/23 ) ****

class Solution {
  public:
    vector<int> topK(vector<int>& nums, int k) {
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        priority_queue<pair<int,int>> pq;
        for(auto i : m){
            pq.push({i.second,i.first});
        }
        vector<int> ans;
        for(int i=0;i<k;i++){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;
    }
};

************************************************************************************************
**** Sum of upper and lower triangles ( 07/11/23 ) ****

class Solution
{   
    public:
    //Function to return sum of upper and lower triangles of a matrix.
    vector<int> sumTriangles(const vector<vector<int> >& matrix, int n)
    {
        vector<int> ans(2,0);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(j<=i){
                    ans[1]+=matrix[i][j];
                }
                if(j>=i){
                    ans[0]+=matrix[i][j];
                }
            }
        }
        return ans;
    }
};

*************************************************************************************************
