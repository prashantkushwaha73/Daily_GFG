**************************************************************************************************************************************
**** Panagram Checking ( 01/02/24 ) ****

class Solution
{
  public:
    //Function to check if a string is Pangram or not.
    bool checkPangram (string s) {
        vector<bool> flag(26);
        for(int i=0;i<s.size();i++){
            if(int(s[i])<=90 && int(s[i])>=65){
                flag[s[i]-'A']=true;
            }
            else if(int(s[i])<=122 && int(s[i])>=97){
                flag[s[i]-'a']=true;
            }
        }
        for(int i=0;i<flag.size();i++){
            if(flag[i]==false){
                return false;
            }
        }
        return true;
    }
};

****************************************************************************************************************************************
**** Implement Atoi ( 02/02/24 ) ****

class Solution{
  public:
    /*You are required to complete this method */
    int atoi(string s) {
        int m = 1,i=0,v;
        if(s[0]=='-'){
            i++;
            m=-1;
            if(i<=s.size()){
                if(int(s[i])>=48 && int(s[i])<=57){
                    v = s[i]-'0';
                    i++;
                }
                else{
                    return -1;
                }
            }
        }
        else{
             if(i<=s.size()){
                if(int(s[i])>=48 && int(s[i])<=57){
                    v = s[i]-'0';
                    i++;
                }
                else{
                    return -1;
                }
            }
        }
        for(i;i<s.size();i++){
            if(int(s[i])>=48 && int(s[i])<=57){
                v = (v*10)+(s[i]-'0');
            }
            else{
                return -1;
            }
        }
        return v*m;
    }
};

***************************************************************************************************************************
**** Sorted insert for circular linked list ( 05/02/24 ) ****

class Solution
{
    public:
    Node *sortedInsert(Node* head, int data)
    {
       Node* temp = head;
       if(temp==NULL){
           Node* ans = new Node(data);
           temp = ans;
           ans->next = ans;
           return ans;
       }
       if(temp->next == temp){
           if(data <= temp->data){
               Node* ans = new Node(data);
               temp->next = ans;
               ans->next = temp;
               return ans;
           }
           else{
               Node* pemp = new Node(data);
               pemp->next = temp;
               temp->next = pemp;
               return temp;
           }
       }
       Node* p = head;
           while(p->next != head){
               p=p->next;
           }
       if(data < head->data || data > p->data){
           if(data > p->data){
               Node* ans = new Node(data);
               ans->next = p->next;
               p->next = ans;
               return head;
           }
           Node* ans = new Node(data);
           p->next = ans;
           ans->next = head;
           return ans;
       }
       while(1){
           if(data <= temp->next->data && data >= temp->data){
               Node* pemp = new Node(data);
               pemp->next = temp->next;
               temp->next = pemp;
               return head;
           }
           temp=temp->next;
       }
       return temp;
    }
};

***************************************************************************************************************************
**** Count the nodes at distance K from leaf ( 06/02/24 ) ****

class Solution
{
    public:
    //Function to return count of nodes at a given distance from leaf nodes.
    
    void solve(Node* root,vector<Node*>& v,unordered_map<Node*,bool>& m,int& k,int& size){
        v.push_back(root);
        size = v.size();
        if(root->left==NULL && root->right==NULL){
            if(size-k >0){
                m[v[size-k-1]]=true;
            }
        }
        else{
            if(root->left){
                solve(root->left,v,m,k,size);
            }
            if(root->right){
                solve(root->right,v,m,k,size);
            }
        }
        v.pop_back();
    }
    
    int printKDistantfromLeaf(Node* root, int k)
    {
    	vector<Node*> v;
    	unordered_map<Node*,bool> m;
    	int size;
    	solve(root,v,m,k,size);
    	return m.size();
    }
};

************************************************************************************************************************
**** Min distance between two given nodes of a Binary Tree ( 07/02/24 ) ****

class Solution{
    public:
     Node* lca(Node* root ,int n1 ,int n2 )
    {
       if(root==NULL){
           return NULL;
       }
       if(root->data==n1 || root->data==n2){
           return root;
       }
       Node* left=lca(root->left,n1,n2);
       Node* right=lca(root->right,n1,n2);
       if(left!=NULL && right!=NULL){
           return root;
       }
       else if(left==NULL && right!=NULL){
           return right;
       }
       else if(right==NULL && left!=NULL){
           return left;
       }
       else{
           return NULL;
       }
    }
    
    void solve(Node* root,int n,int count,int& ans){
        if(root == NULL){
            return;
        }
        if(root->data == n){
            ans = count;
            return;
        }
        solve(root->left,n,count+1,ans);
        solve(root->right,n,count+1,ans);
    }
    
    /* Should return minimum distance between a and b
    in a tree with given root*/
    int findDist(Node* root, int a, int b) {
        root  = lca(root,a,b);
        if(root->data == a){
            int ans ;
            solve(root,b,0,ans);
            return ans;
        }
        else if(root->data == b){
            int ans;
            solve(root,a,0,ans);
            return ans;
        }
        else{
            int ans1;
            solve(root,a,0,ans1);
            int ans2;
            solve(root,b,0,ans2);
            return ans1+ans2;
        }
        
    }
};

***************************************************************************************************************************
**** Check if all leaves are at same level ( 8/02/24 ) ****

class Solution{
  public:
   
    void solve(Node* root,bool& ans,int& d,bool& flag,int count){
        if(root==NULL){
            return;
        }
        if(root->left==NULL && root->right==NULL){
            if(flag){
                if(count!=d){
                    ans = false;
                }
            }
            else{
                flag = true;
                d = count;
            }
        }
        else{
            solve(root->left,ans,d,flag,count+1);
            solve(root->right,ans,d,flag,count+1);
        }
    }
  
    /*You are required to complete this method*/
    bool check(Node *root)
    {
        bool ans = true;
        int d = -1,count=0;
        bool flag = false;
        solve(root,ans,d,flag,0);
        return ans;
    }
};

**************************************************************************************************************************************
**** Check for Children Sum Property in a Binary Tree ( 09/02/24 ) ****

class Solution{
    public:
    
    void solve(Node* root,bool& ans){
        if(root==NULL){
            return;
        }
        if(root->left && root->right){
            if(root->left->data+root->right->data != root->data){
                ans = false;
            }
        }
        else if(root->left){
            if(root->left->data != root->data){
                ans = false;
            }
        }
        else if(root->right){
            if(root->right->data != root->data){
                ans = false;
            }
        }
        solve(root->left,ans);
        solve(root->right,ans);
    }
    
    int isSumProperty(Node *root)
    {
       bool ans = true;
       solve(root,ans);
       return ans;
    }
};

********************************************************************************************************************
**** Recamans sequence ( 11/02/24 ) ****

class Solution{
public:
   int solve(int n,vector<int>& dp,unordered_map<int,bool>& m){
       if(dp[n]!=-1){
           return dp[n];
       }
       int v1 = solve(n-1,dp,m)-n;
       if(v1>0 && m[v1]==false){
           m[v1]=true;
           return dp[n] = v1;
       }
       v1 = solve(n-1,dp,m)+n;
       m[v1]=true;
       return dp[n] = v1;
   }

    vector<int> recamanSequence(int n){
        vector<int> dp(n+1,-1);
        unordered_map<int,bool> m;
        vector<int> ans;
        ans.push_back(0);
        m[0]=true;
        dp[0]=0;
        for(int i=1;i<=n;i++){
            ans.push_back(solve(i,dp,m));
        }
        return ans;
    }
};

*************************************************************************************************************************************
**** Recursive sequence ( 12/02/24 ) ****

class Solution{
public:
    int M = 1e9+7;
    long long sequence(int n){
         long long ans = 0;
         long long d = 1;
         long long v;
         for(int i=1;i<=n;i++){
             v = 1;
             for(int j=0;j<i;j++){
                 v = (v*d)%M;
                 d++;
             }
             ans = ans%M + v%M;
         }
         return ans%M;
    }
};

*******************************************************************************************************************************************
**** Flatten BST to sorted list ( 16/02/24 ) ****

class Solution
{
public:
   
    void fill(Node* root,vector<Node*>& v){
        if(root==NULL){
            return;
        }
        fill(root->left,v);
        v.push_back(root);
        fill(root->right,v);
    }

    Node *flattenBST(Node *root)
    {
        vector<Node*> v;
        fill(root,v);
        Node* ans = v[0];
        ans->left = NULL;
        Node* temp = ans;
        for(int i=1;i<v.size();i++){
            temp->right = v[i];
            v[i]->left = NULL;
            temp = v[i];
        }
        return ans;
    }
};

****************************************************************************************************************************
**** Does array represent Heap ( 17/02/24 ) ****

class Solution{
    public:
    bool isMaxHeap(int arr[], int n)
    {
        for(int i=0;i<n;i++){
            if((2*i)+1 < n){
                if(arr[i]<arr[(2*i)+1]){
                    return false;
                }
            }
            if((2*i)+2 < n){
                if(arr[i]<arr[(2*i)+2]){
                    return false;
                }
            }
        }
        return true;
    }
};

*********************************************************************************************************************************
**** Sum of leaf nodes in BST ( 18/02/24 ) ****

class Solution
{
    public:
        /*You are required to complete below method */
        
        void solve(Node* root,int& ans){
            if(root==NULL){
                return;
            }
            if(root->left==NULL && root->right==NULL){
                ans+=root->data;
            }
            solve(root->left,ans);
            solve(root->right,ans);
        }
        
        int sumOfLeafNodes(Node *root ){
             int ans = 0;
             solve(root,ans);
             return ans;
        }
};

*****************************************************************************************************************************************
**** Word Break ( 20/02/24 ) ****

class Solution
{
public:
    
    void solve(unordered_map<string,bool>& m,string s,bool& ans){
        if(s.size()==0){
            ans = true; 
            return;
        }
        for(int i=1;i<=s.size();i++){
            if(m[s.substr(0,i)]){
                solve(m,s.substr(i,s.size()-i),ans);
            }
        }
        
    }

    int wordBreak(int n, string A, vector<string> &B) {
        unordered_map<string,bool> m;
        for(int i=0;i<B.size();i++){
            m[B[i]]=true;
        }
        bool ans = false;
        solve(m,A,ans);
        return ans;
    }
};

****************************************************************************************************************************
**** Distinct occurrences ( 22/02/24 ) ****

class Solution
{
    public:
    int M = 1e9+7;
    int solve(string& s,string& t,int a,int b,vector<vector<int>>& dp){
        if(a>=s.size() && b<t.size()){
            return 0;
        }
        if(b>=t.size()){
            return 1;
        }
        if(dp[a][b]!=-1){
            return dp[a][b];
        }
        int v = 0;
        if(s[a]==t[b]){
            v = v%M + solve(s,t,a+1,b+1,dp)%M;
        }
            v = v%M + solve(s,t,a+1,b,dp)%M;
        return dp[a][b] = v%M;
    }
   
    int subsequenceCount(string s, string t)
    {
       vector<vector<int>> dp(s.size(),vector<int> (t.size(),-1));
       return solve(s,t,0,0,dp);
    }
};

*********************************************************************************************************************
**** Maximum Sum Problem ( 24/02/24 ) ****

class Solution
{
    public:
       int solve(int n){
           if(n==0){
               return 0;
           }
           int a = n/2,b=n/3,c=n/4;
           int v = solve(a)+solve(b)+solve(c);
           return max(n,v);
       }
        int maxSum(int n)
        {
             return solve(n);
        }
};

***************************************************************************************************************************
**** Power Set ( 26/02/24 ) ****

class Solution{
	public:
	   
	   void solve(string s,int ind,string str,vector<string>& ans){
	       if(ind>=s.size()){
	           ans.push_back(str);
	       }
	       if(s[ind]-'a'>=0){
	           solve(s,ind+1,str+s[ind],ans);
	           solve(s,ind+1,str,ans);
	       }
	   }
	
		vector<string> AllPossibleStrings(string s){
		     vector<string> ans;
		     int n = s.size();
		     string p;
		     for(int i=0;i<n;i++){
		         p="";
		         p.push_back(s[i]);
		         solve(s,i+1,p,ans);
		     }
		     sort(ans.begin(),ans.end());
		     return ans;
		}
};

********************************************************************************************************************************
