**************************************************************************************************************************************
**** Panagram Checking ( 01/02/24 ) ****

class Solution
{
  public:
    //Function to check if a string is Pangram or not.
    bool checkPangram (string s) {
        vector<bool> flag(26);
        for(int i=0;i<s.size();i++){
            if(int(s[i])<=90 && int(s[i])>=65){
                flag[s[i]-'A']=true;
            }
            else if(int(s[i])<=122 && int(s[i])>=97){
                flag[s[i]-'a']=true;
            }
        }
        for(int i=0;i<flag.size();i++){
            if(flag[i]==false){
                return false;
            }
        }
        return true;
    }
};

****************************************************************************************************************************************
**** Implement Atoi ( 02/02/24 ) ****

class Solution{
  public:
    /*You are required to complete this method */
    int atoi(string s) {
        int m = 1,i=0,v;
        if(s[0]=='-'){
            i++;
            m=-1;
            if(i<=s.size()){
                if(int(s[i])>=48 && int(s[i])<=57){
                    v = s[i]-'0';
                    i++;
                }
                else{
                    return -1;
                }
            }
        }
        else{
             if(i<=s.size()){
                if(int(s[i])>=48 && int(s[i])<=57){
                    v = s[i]-'0';
                    i++;
                }
                else{
                    return -1;
                }
            }
        }
        for(i;i<s.size();i++){
            if(int(s[i])>=48 && int(s[i])<=57){
                v = (v*10)+(s[i]-'0');
            }
            else{
                return -1;
            }
        }
        return v*m;
    }
};

***************************************************************************************************************************
**** Sorted insert for circular linked list ( 05/02/24 ) ****

class Solution
{
    public:
    Node *sortedInsert(Node* head, int data)
    {
       Node* temp = head;
       if(temp==NULL){
           Node* ans = new Node(data);
           temp = ans;
           ans->next = ans;
           return ans;
       }
       if(temp->next == temp){
           if(data <= temp->data){
               Node* ans = new Node(data);
               temp->next = ans;
               ans->next = temp;
               return ans;
           }
           else{
               Node* pemp = new Node(data);
               pemp->next = temp;
               temp->next = pemp;
               return temp;
           }
       }
       Node* p = head;
           while(p->next != head){
               p=p->next;
           }
       if(data < head->data || data > p->data){
           if(data > p->data){
               Node* ans = new Node(data);
               ans->next = p->next;
               p->next = ans;
               return head;
           }
           Node* ans = new Node(data);
           p->next = ans;
           ans->next = head;
           return ans;
       }
       while(1){
           if(data <= temp->next->data && data >= temp->data){
               Node* pemp = new Node(data);
               pemp->next = temp->next;
               temp->next = pemp;
               return head;
           }
           temp=temp->next;
       }
       return temp;
    }
};

***************************************************************************************************************************
**** Count the nodes at distance K from leaf ( 06/02/24 ) ****

class Solution
{
    public:
    //Function to return count of nodes at a given distance from leaf nodes.
    
    void solve(Node* root,vector<Node*>& v,unordered_map<Node*,bool>& m,int& k,int& size){
        v.push_back(root);
        size = v.size();
        if(root->left==NULL && root->right==NULL){
            if(size-k >0){
                m[v[size-k-1]]=true;
            }
        }
        else{
            if(root->left){
                solve(root->left,v,m,k,size);
            }
            if(root->right){
                solve(root->right,v,m,k,size);
            }
        }
        v.pop_back();
    }
    
    int printKDistantfromLeaf(Node* root, int k)
    {
    	vector<Node*> v;
    	unordered_map<Node*,bool> m;
    	int size;
    	solve(root,v,m,k,size);
    	return m.size();
    }
};

************************************************************************************************************************
