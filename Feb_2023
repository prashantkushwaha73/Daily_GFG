**** Count number of free cell ( 8-2-23 ) ****

class Solution{
  public:
  vector<long long int> countZero(int n, int k, vector<vector<int>>& arr){
      vector<bool> row(n+1,false);
      vector<bool> col(n+1,false);
      vector<long long int> ans;
      int rows=n,columns=n;
      int zeros=n*n;
      for(int i=0;i<k;i++){
          int r=arr[i][0],c=arr[i][1];
          if(row[r]==false && col[c]==false){
              zeros=zeros-rows-columns+1;
              rows--;
              columns--;
              row[r]=true;
              col[c]=true;
          }
          else if(row[r]==false && col[c]==true){
              zeros=zeros-columns;
              rows--;
              row[r]=true;
          }
          else if(row[r]==true && col[c]==false){
              zeros=zeros-rows;
              columns--;
              col[c]=true;
          }
          ans.push_back(zeros);
      }
      return ans;
  }
};

******************************************************************************
**** Balloon Everywhere ( 10/2/23 ) ****

class Solution{
public:
    int maxInstance(string s){
        map<char,int> mapp;
        for(int i=0;i<s.size();i++){
            mapp[s[i]]++;
        }
        int ans=0;
    while(1){
        mapp['b']-=1;
        mapp['a']-=1;
        mapp['l']-=2;
        mapp['o']-=2;
        mapp['n']-=1;
        if(mapp['b']>=0&&mapp['a']>=0&&mapp['l']>=0&&mapp['o']>=0&&mapp['n']>=0){
            ans++;
        }
        else{
            break;
        }
    }
    return ans;
    }
};

******************************************************************************
**** Minimum Days ( 11/2/23 )

class Solution {

  public:
    int getMinimumDays(int N,string S, vector<int> &P) {
        vector<int> posi(N);
        for(int i=0;i<P.size();i++){
            posi[P[i]]=i;
        }
        int ans=0;
        bool flag=false;
        stack<char> s;
        s.push(S[0]);
        for(int i=1;i<S.size();i++){
            if(S[i]!=s.top()){
                s.push(S[i]);
                continue;
            }
            else{
                flag=true;
                if(posi[i-1]<posi[i]){
                    s.pop();
                    s.push('?');
                    s.push(S[i]);
                    if(posi[i-1]>ans){
                        ans=posi[i-1];
                    }
                }
                else{
                    s.push('?');
                    if(posi[i]>ans){
                        ans=posi[i];
                    }
                }
            }
        }
        if(flag){
            return ans+1;
        }
        else{
            return 0;
        }
    }
};

*******************************************************************************************
**** Prime List ( 12/2/23 ) ****

class Solution{
private:
bool isPrime(int n)  
{
 int m=sqrt(n);  
  for(int i = 2; i <= m; i++)  
  {  
      if(n % i == 0)  
      {  
          return  false; 
          break;  
      }  
  }
  return true;
}  
int cpn(int n){
    int left=n;
    int right=n;
    while(isPrime(left)==0 ){
        left--;
    }
    while(isPrime(right)==0){
        right++;
    }
    if(n-left <= right-n){
        return left;
    }
    else{
        return right;
    }
}
public:
    Node *primeList(Node *head){
        Node* ans=head;
        while(head!=NULL){
          int n=head->val;
          if(n==1){
              head->val=2;
              head=head->next;
              continue;
          }
          if(n==2 || isPrime(n) ){
              head=head->next;
              continue;
          }
          else{
              int rep=cpn(n);
              head->val=rep;
              head=head->next;
              continue;
          }
        }
        return ans;
    }
};

******************************************************************************************************************************************************
**** Arithmetic Number ( 13/2/23 ) ****

class Solution{
public:
    int inSequence(int A, int B, int C){
        if(C==0){
            if(A==B){
                return true;
            }
            else{
                return false;
            }
        }
        if(C>0 && B<A){
            return false;
        }
        if(C<0 && B>A){
            return false;
        }
        if((B-A)%C==0){
            return true;
        }
        else{
            return false;
        }
    }
};

***************************************************************************************************************************************************
**** Good Stones ( 16/2/23 ) ****
class Solution{
public:
    int goodStones(int n,vector<int> &arr){
        vector<int> parent(n,0);
        bool check=true;
        for(int i=0;i<n;i++){
            if(arr[i]==0){
                continue;
            }
            else if(arr[i]<0){
                if((i+arr[i])<0){
                    parent[i]=-1;
                    check=false;
                }
            }
            else{
                if(i+arr[i]>=n){
                    parent[i]=-1;
                    check=false;
                }
            }
        }
        if(check){
            return 0;
        }
    
        for(int i=0;i<n;i++){
            if(parent[i]==-1){
                continue;
            }
            if(parent[i+arr[i]]==-1){
                parent[i]=-1;
            }
            else{
                parent[i]=i+arr[i];
            }
        }
        while(1){
            check=false;
        for(int i=0;i<n;i++){
            if(parent[i]==-1){
                continue;
            }
            if(parent[i+arr[i]]==-1){
                parent[i]=-1;
                check=true;
            }
        }
        if(check==false){
            break;
        }
        }
        int ans=0;
        for(int i=0;i<n;i++){
            if(parent[i]==-1){
                ans++;
            }
        }
        
        return ans;
        
    }  
};

*********************************************************************************************************************
**** Is it Fibonacci ( 17/2/23 ) ****
class Solution {
  public:
    long long solve(int N, int K, vector<long long> GeekNum) {
        if(N<=GeekNum.size()){
            return GeekNum[N-1];
        }
        long long sum=0;
        for(int i=0;i<K;i++){
            sum+=GeekNum[i];
        }
        int a=0,b=K-1;
        while(b+1 != N){
            GeekNum.push_back(sum);
            sum+=GeekNum[b+1];
            sum-=GeekNum[a];
            a++;
            b++;
        }
      
        return GeekNum[b];
    }
};

*******************************************************************************************************
**** Apple Sequences ( 18/2/23 ) ****

class Solution {
  public: int appleSequences(int n, int m, string arr) {
    int s = 0, e = 0, ans = INT_MIN, os = 0;
    bool flag;
    while (e < arr.size()) {
      flag = true;
      while ((e < arr.size() && arr[e] == 'A') || (e < arr.size() && arr[e] == 'O' && os < m)) {
        if (e < arr.size() && arr[e] == 'O' && os < m) {
          flag = false;
          os++;
          e++;
        } else {
          flag = false;
          e++;
        }
      }
      if (flag == false) {
        e--;
      }
      if ((e - s + 1) > ans) {
        ans = e - s + 1;
      }
      if (arr[s] == 'O') {
        os--;
      }
      if (e + 1 < arr.size() && arr[e + 1] == 'O') {
        os++;
      }
      s++;
      e++;
      while (os > m) {
        if (arr[s] == 'O') {
          os--;
        }
        s++;
      }
      while (e + 1 < arr.size() && arr[e + 1] == 'A') {
        e++;
      }
    }
    return ans;
  }
};

****************************************************************************************************************
