**** Count number of free cell ( 8-2-23 ) ****

class Solution{
  public:
  vector<long long int> countZero(int n, int k, vector<vector<int>>& arr){
      vector<bool> row(n+1,false);
      vector<bool> col(n+1,false);
      vector<long long int> ans;
      int rows=n,columns=n;
      int zeros=n*n;
      for(int i=0;i<k;i++){
          int r=arr[i][0],c=arr[i][1];
          if(row[r]==false && col[c]==false){
              zeros=zeros-rows-columns+1;
              rows--;
              columns--;
              row[r]=true;
              col[c]=true;
          }
          else if(row[r]==false && col[c]==true){
              zeros=zeros-columns;
              rows--;
              row[r]=true;
          }
          else if(row[r]==true && col[c]==false){
              zeros=zeros-rows;
              columns--;
              col[c]=true;
          }
          ans.push_back(zeros);
      }
      return ans;
  }
};

******************************************************************************
**** Balloon Everywhere ( 10/2/23 ) ****

class Solution{
public:
    int maxInstance(string s){
        map<char,int> mapp;
        for(int i=0;i<s.size();i++){
            mapp[s[i]]++;
        }
        int ans=0;
    while(1){
        mapp['b']-=1;
        mapp['a']-=1;
        mapp['l']-=2;
        mapp['o']-=2;
        mapp['n']-=1;
        if(mapp['b']>=0&&mapp['a']>=0&&mapp['l']>=0&&mapp['o']>=0&&mapp['n']>=0){
            ans++;
        }
        else{
            break;
        }
    }
    return ans;
    }
};

******************************************************************************
**** Minimum Days ( 11/2/23 )

class Solution {

  public:
    int getMinimumDays(int N,string S, vector<int> &P) {
        vector<int> posi(N);
        for(int i=0;i<P.size();i++){
            posi[P[i]]=i;
        }
        int ans=0;
        bool flag=false;
        stack<char> s;
        s.push(S[0]);
        for(int i=1;i<S.size();i++){
            if(S[i]!=s.top()){
                s.push(S[i]);
                continue;
            }
            else{
                flag=true;
                if(posi[i-1]<posi[i]){
                    s.pop();
                    s.push('?');
                    s.push(S[i]);
                    if(posi[i-1]>ans){
                        ans=posi[i-1];
                    }
                }
                else{
                    s.push('?');
                    if(posi[i]>ans){
                        ans=posi[i];
                    }
                }
            }
        }
        if(flag){
            return ans+1;
        }
        else{
            return 0;
        }
    }
};
