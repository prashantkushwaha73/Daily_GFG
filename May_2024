************************************************************************************************************************
**** Arrange Consonants and Vowels ( 01/05/24 ) ****

class Solution {
  public:
    // task is to complete this function
    // function should return head to the list after making
    // necessary arrangements
    
    bool check(char c){
        if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u'){
            return true;
        }
        return false;
    }
    
    struct Node* arrangeCV(Node* head) {
        Node* v=new Node('1');
        Node* c=new Node('1');
        Node* tv=v; Node* tc=c;
        Node* temp = head;
        while(temp){
            if(check(temp->data)){
                head = temp->next;
                temp->next = NULL;
                tv->next = temp;
                tv = temp;
                temp = head;
            }
            else{
                head = temp->next;
                temp->next = NULL;
                tc->next = temp;
                tc = temp;
                temp = head;
            }
        }
        if(tv->data != '1'){
            Node* ans = v->next;
            tv->next = c->next;
            return ans;
        }
        return c->next;
    }
};

**************************************************************************************************************************************
**** K distance from root ( 03/05/24 ) ****

class Solution
{
    public:
    // function should print the nodes at k distance from root
    
    void solve(Node* root,int count,int& k,vector<int>& ans){
        if(root==NULL){
            return;
        }
        if(count==k){
            ans.push_back(root->data);
        }
        solve(root->left,count+1,k,ans);
        solve(root->right,count+1,k,ans);
    }
    
    vector<int> Kdistance(struct Node *root, int k)
    {
      vector<int> ans;
      solve(root,0,k,ans);
      return ans;
    }
};

******************************************************************************************************************************************
**** Vertical sum ( 05/05/24 ) ****

class Solution{
  public:
  
   void solve(Node* root,int posi,map<int,int>& m){
       if(root==NULL){
           return;
       }
       if(m[posi]){
           m[posi]+=root->data;
       }
       else{
           m[posi]=root->data;
       }
       solve(root->left,posi-1,m);
       solve(root->right,posi+1,m);
   }
  
    vector <int> verticalSum(Node *root) {
        map<int,int> m;
        solve(root,0,m);
        vector<int> ans;
        for(auto i:m){
            ans.push_back(i.second);
        }
        return ans;
    }
};

*************************************************************************************************************************
**** Print all nodes that don't have sibling ( 06/05/24 ) ****

void solve(Node* root,vector<int>& ans){
    if(root==NULL){
        return;
    }
    if(root->left && root->right == NULL){
        ans.push_back(root->left->data);
    }
    else if(root->left == NULL && root->right){
        ans.push_back(root->right->data);
    }
    solve(root->left,ans);
    solve(root->right,ans);
}

vector<int> noSibling(Node* node)
{
    vector<int> ans;
    solve(node,ans);
    sort(ans.begin(),ans.end());
    if(ans.size()){
        return ans;
    }
    return {-1};
}

********************************************************************************************************************************
**** Reverse Level Order Traversal ( 07/05/24 ) ****

vector<int> reverseLevelOrder(Node *root)
{
stack<int> st;
    queue<Node*> pq;
    pq.push(root);
    while(!pq.empty()){
        int n=pq.size();
        for(int i=0;i<n;i++){
            Node* temp=pq.front();
            pq.pop();
            st.push(temp->data);
            if(temp->right!=NULL) pq.push(temp->right);
            if(temp->left!=NULL) pq.push(temp->left);
        }
    }
    
    vector<int> ans;
    while(!st.empty()){
        ans.push_back(st.top());
        st.pop();
    }
    return ans;
}

******************************************************************************************************************************************
**** Root to Leaf Paths ( 08/05/24 ) ****

class Solution {
  public:
  
    void solve(Node* root,vector<int> v,vector<vector<int>>& ans){
        if(root==NULL){
            return;
        }
        v.push_back(root->data);
        if(root->left==NULL && root->right==NULL){
            ans.push_back(v);
        }
        solve(root->left,v,ans);
        solve(root->right,v,ans);
    }
  
    vector<vector<int>> Paths(Node* root) {
        vector<vector<int>> ans;
        solve(root,{},ans);
        return ans;
    }
};

*********************************************************************************************************************************************
**** Divisor Game ( 09/05/24 ) ****

class Solution {
  public:
    bool divisorGame(int n) {
        return !(n%2);
    }
};

*********************************************************************************************************************************************
**** Juggler Sequence ( 11/05/24 ) ****

class Solution {
  public:
    vector<long long> jugglerSequence(long long n) {
        vector<long long> ans;
        while(n!=1){
            ans.push_back(n);
            if(n%2){
                n = pow(sqrt(n),3);
            }
            else{
                n = sqrt(n);
            }
        }
        ans.push_back(n);
        return ans;
    }
};

*******************************************************************************************************************************************
**** Divisibility tree ( 16/05/24 ) ****

class Solution {
public:
    
    int solve(int v,unordered_map<int,vector<int>>& m,int& ans,vector<bool>& visited){
        int t=0;
        int k;
        for(int i=0;i<m[v].size();i++){
           if(visited[m[v][i]]){
               continue;
           }
           visited[m[v][i]]=true;
            k = solve(m[v][i],m,ans,visited);
            if(k%2==0){
                ans++;
                k = 0;
            }
            t+=k;
        }
        return t+1;
    }

	int minimumEdgeRemove(int n, vector<vector<int>>edges){
	    unordered_map<int,vector<int>> m;
	    for(int i=0;i<edges.size();i++){
	        m[edges[i][1]].push_back(edges[i][0]);
	        m[edges[i][0]].push_back(edges[i][1]);
	    }
	    vector<bool> visited(n+1,false);
	    int ans = 0;
	    visited[1]=true;
	    int p = solve(1,m,ans,visited);
	    return ans;
	}
};

**************************************************************************************************************************************************
**** Find the closest number ( 19/05/24 ) ****

class Solution{
    public:
    int findClosest( int n, int k,int arr[]) 
    { 
        int ans = INT_MAX;
        int d = INT_MAX;
        for(int i=0;i<n;i++){
            if(abs(k-arr[i])<d){
                ans = arr[i];
                d = abs(k-arr[i]);
            }
            else if(abs(k-arr[i])==d){
                ans = max(ans,arr[i]);
            }
        }
        return ans;
    } 
};

******************************************************************************************************************************************************
**** K closest elements (  21/05/24 ) ****

class Solution {
  public:
  
    class Compare {
    public:
       bool operator()(pair<int,int> a,pair<int,int> b){
           if(a.first == b.first){
               if(a.second > b.second){
                   return true;
               }
               else{
                   return false;
               }
           }
           else if(a.first<b.first){
               return true;
           }
           else{
               return false;
           }
      }
};
  
    vector<int> printKClosest(vector<int> arr, int n, int k, int x) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,Compare> pq;
        for(int i=0;i<arr.size();i++){
            pq.push({abs(x-arr[i]),arr[i]});
        }
        vector<int> ans;
        stack<pair<int,int>> st;
        while(!pq.empty()){
            st.push(pq.top());
            pq.pop();
        }
        if(st.top().second==x){
            st.pop();
        }
        while(k){
           ans.push_back(st.top().second);
           st.pop();
           k--;
        }
        return ans;
    }
};

***********************************************************************************************************************************************
**** You and your books ( 25/05/24 ) ****

class Solution {
  public:
    /*You are requried to complete this method */
    long long max_Books(int arr[], int n, int k) {
        long long ans = 0,count=0;
        for(int i=0;i<n;i++){
            if(arr[i]<=k){
                count+=arr[i];
            }
            else{
                ans = max(ans,count);
                count = 0;
            }
        }
        ans = max(ans,count);
        return ans;
    }
};

*******************************************************************************************************************************************************
**** Minimum cost to fill given weight in a bag ( 28/05/24 ) ****

class Solution {
  public:
  
    int solve(int w,vector<int>& cost,vector<int>& dp){
        if(w==0){
            return 0;
        }
        if(w<0){
            return -1;
        }
        if(dp[w]!=-1){
            return dp[w];
        }
        int v = INT_MAX,m;
        for(int i=0;i<cost.size();i++){
            if(cost[i]!=-1){
                m = solve(w-i-1,cost,dp);
                if(m>=0){
                    v = min(v,m+cost[i]);
                }
            }
        }
        if(v!=INT_MAX){
            return dp[w] = v;
        }
        else{
            return -1;
        }
    }
     
    int minimumCost(int n, int w, vector<int> &cost) {
           vector<int> dp(w+1,-1);
           return solve(w,cost,dp);
    }
};

******************************************************************************************************************************************************


