************************************************************************************************************************
**** Arrange Consonants and Vowels ( 01/05/24 ) ****

class Solution {
  public:
    // task is to complete this function
    // function should return head to the list after making
    // necessary arrangements
    
    bool check(char c){
        if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u'){
            return true;
        }
        return false;
    }
    
    struct Node* arrangeCV(Node* head) {
        Node* v=new Node('1');
        Node* c=new Node('1');
        Node* tv=v; Node* tc=c;
        Node* temp = head;
        while(temp){
            if(check(temp->data)){
                head = temp->next;
                temp->next = NULL;
                tv->next = temp;
                tv = temp;
                temp = head;
            }
            else{
                head = temp->next;
                temp->next = NULL;
                tc->next = temp;
                tc = temp;
                temp = head;
            }
        }
        if(tv->data != '1'){
            Node* ans = v->next;
            tv->next = c->next;
            return ans;
        }
        return c->next;
    }
};

**************************************************************************************************************************************
**** K distance from root ( 03/05/24 ) ****

class Solution
{
    public:
    // function should print the nodes at k distance from root
    
    void solve(Node* root,int count,int& k,vector<int>& ans){
        if(root==NULL){
            return;
        }
        if(count==k){
            ans.push_back(root->data);
        }
        solve(root->left,count+1,k,ans);
        solve(root->right,count+1,k,ans);
    }
    
    vector<int> Kdistance(struct Node *root, int k)
    {
      vector<int> ans;
      solve(root,0,k,ans);
      return ans;
    }
};

******************************************************************************************************************************************
**** Vertical sum ( 05/05/24 ) ****

class Solution{
  public:
  
   void solve(Node* root,int posi,map<int,int>& m){
       if(root==NULL){
           return;
       }
       if(m[posi]){
           m[posi]+=root->data;
       }
       else{
           m[posi]=root->data;
       }
       solve(root->left,posi-1,m);
       solve(root->right,posi+1,m);
   }
  
    vector <int> verticalSum(Node *root) {
        map<int,int> m;
        solve(root,0,m);
        vector<int> ans;
        for(auto i:m){
            ans.push_back(i.second);
        }
        return ans;
    }
};

*************************************************************************************************************************
**** Print all nodes that don't have sibling ( 06/05/24 ) ****

void solve(Node* root,vector<int>& ans){
    if(root==NULL){
        return;
    }
    if(root->left && root->right == NULL){
        ans.push_back(root->left->data);
    }
    else if(root->left == NULL && root->right){
        ans.push_back(root->right->data);
    }
    solve(root->left,ans);
    solve(root->right,ans);
}

vector<int> noSibling(Node* node)
{
    vector<int> ans;
    solve(node,ans);
    sort(ans.begin(),ans.end());
    if(ans.size()){
        return ans;
    }
    return {-1};
}

********************************************************************************************************************************
**** Reverse Level Order Traversal ( 07/05/24 ) ****

vector<int> reverseLevelOrder(Node *root)
{
stack<int> st;
    queue<Node*> pq;
    pq.push(root);
    while(!pq.empty()){
        int n=pq.size();
        for(int i=0;i<n;i++){
            Node* temp=pq.front();
            pq.pop();
            st.push(temp->data);
            if(temp->right!=NULL) pq.push(temp->right);
            if(temp->left!=NULL) pq.push(temp->left);
        }
    }
    
    vector<int> ans;
    while(!st.empty()){
        ans.push_back(st.top());
        st.pop();
    }
    return ans;
}

******************************************************************************************************************************************
