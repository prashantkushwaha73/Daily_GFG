****************************************************************************************
**** Number of 1 Bits ( 01/07/23 ) ****

 class Solution {
  public:
    int setBits(int N) {
        int ans = 0;
        while(N){
            if(N%2){
                ans++;
                N/=2;
            }
            else{
                N/=2;
            }
        }
        return ans;
    }
};

******************************************************************************
**** Merge Without Extra Space ( 07/07/23 ) ****

        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            int arr[m+n],i=0,j=0,index=0;
            while(i<n && j<m){
                if(arr1[i]<arr2[j]){
                    arr[index]=arr1[i];
                    i++;
                    index++;
                }
                else{
                    arr[index]=arr2[j];
                    j++;
                    index++;
                }
            }
            while(i<n){
                arr[index]=arr1[i];
                i++;
                index++;
            }
            while(j<m){
                arr[index]=arr2[j];
                j++;
                index++;
            }
            index=0;
            for(int p=0;p<n;p++){
                arr1[p]=arr[index];
                index++;
            }
            for(int p=0;p<m;p++){
                arr2[p]=arr[index];
                index++;
            }
        } 

*****************************************************************************************************
**** Smallest Positive missing number ( 09/07/23 ) ****

class Solution
{
    public:
    //Function to find the smallest positive number missing from the array.
    int missingNumber(int arr[], int n) 
    { 
        sort(arr,arr+n);
        bool flag = false;
        for(int i=0;i<n;i++){
            if(arr[i]>=0 ){
                if(flag==false){
                    if(arr[i]>1){
                        return 1;
                    }
                    else{
                        flag=true;
                         if(i+1 < n){
                        if(arr[i] < arr[i+1]){
                            if(arr[i]+1 != arr[i+1]){
                                return arr[i]+1;
                            }
                        }
                    }
                    else{
                        return arr[i]+1;
                    }
                    }
                }
                else{
                    if(i+1 < n){
                    if(arr[i] < arr[i+1]){
                            if(arr[i]+1 != arr[i+1]){
                                return arr[i]+1;
                            }
                        }
                    }
                    else{
                        return arr[i]+1;
                    }
                }
            }
        }
        return 1;
    } 
};

***********************************************************************************************************
**** Transpose of Matrix ( 10/07/23 ) ****

class Solution
{   
    public:  
    //Function to find transpose of a matrix.
    void transpose(vector<vector<int>>& matrix, int n)
    { 
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
    }   
};  

******************************************************************************************************
**** Unique Number of Occurrences ( 13/07/23 ) ****

class Solution
{
    public:
    bool isFrequencyUnique(int n, int arr[])
    {
        map<int,int> m;
        for(int i=0;i<n;i++){
            m[arr[i]]++;
        }
        map<int,bool> mapp;
        for(auto i:m){
            if(mapp[i.second]){
                return false;
            }
            else{
                mapp[i.second]=true;
            }
        }
        return true;
    }
};

*************************************************************************************************************
**** Implement two stacks in an array ( 14/07/23 ) ****

class twoStacks
{
    vector<int> v1;
    vector<int> v2;
    int n;
    public:
    
 
    //Function to push an integer into the stack1.
    void push1(int x)
    {
     v1.push_back(x);   
    }
    
    //Function to push an integer into the stack2.
    void push2(int x)
    {
       v2.push_back(x);
    }
    
    //Function to remove an element from top of the stack1.
    int pop1()
    {
        if(v1.size()==0){
            return -1;
        }
        else{
            n = v1[v1.size()-1];
            v1.pop_back();
            return n;
        }
    }
    
    //Function to remove an element from top of the stack2.
    int pop2()
    {
       if(v2.size()==0){
           return -1;
       }
       else{
           n = v2[v2.size()-1];
           v2.pop_back();
           return n;
       }
    }
};

************************************************************************************************
**** Delete middle element of a stack ( 15/07/23 ) ****

class Solution
{
    public:
    
    void solve(stack<int>& s,int siz){
        if(s.size()==siz){
            s.pop();
            return;
        }
        int v = s.top();
        s.pop();
        solve(s,siz);
        s.push(v);
    }
    
    void deleteMid(stack<int>&s, int sizeOfStack)
    {
        int siz;
        if(s.size()%2){
            siz = (s.size()+1)/2;
        }
        else{
            siz = (s.size())/2;
        }
        solve(s,siz);
    }
};

**************************************************************************************************
