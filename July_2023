****************************************************************************************
**** Number of 1 Bits ( 01/07/23 ) ****

 class Solution {
  public:
    int setBits(int N) {
        int ans = 0;
        while(N){
            if(N%2){
                ans++;
                N/=2;
            }
            else{
                N/=2;
            }
        }
        return ans;
    }
};

******************************************************************************
**** Merge Without Extra Space ( 07/07/23 ) ****

        //Function to merge the arrays.
        void merge(long long arr1[], long long arr2[], int n, int m) 
        { 
            int arr[m+n],i=0,j=0,index=0;
            while(i<n && j<m){
                if(arr1[i]<arr2[j]){
                    arr[index]=arr1[i];
                    i++;
                    index++;
                }
                else{
                    arr[index]=arr2[j];
                    j++;
                    index++;
                }
            }
            while(i<n){
                arr[index]=arr1[i];
                i++;
                index++;
            }
            while(j<m){
                arr[index]=arr2[j];
                j++;
                index++;
            }
            index=0;
            for(int p=0;p<n;p++){
                arr1[p]=arr[index];
                index++;
            }
            for(int p=0;p<m;p++){
                arr2[p]=arr[index];
                index++;
            }
        } 

*****************************************************************************************************
**** Smallest Positive missing number ( 09/07/23 ) ****

class Solution
{
    public:
    //Function to find the smallest positive number missing from the array.
    int missingNumber(int arr[], int n) 
    { 
        sort(arr,arr+n);
        bool flag = false;
        for(int i=0;i<n;i++){
            if(arr[i]>=0 ){
                if(flag==false){
                    if(arr[i]>1){
                        return 1;
                    }
                    else{
                        flag=true;
                         if(i+1 < n){
                        if(arr[i] < arr[i+1]){
                            if(arr[i]+1 != arr[i+1]){
                                return arr[i]+1;
                            }
                        }
                    }
                    else{
                        return arr[i]+1;
                    }
                    }
                }
                else{
                    if(i+1 < n){
                    if(arr[i] < arr[i+1]){
                            if(arr[i]+1 != arr[i+1]){
                                return arr[i]+1;
                            }
                        }
                    }
                    else{
                        return arr[i]+1;
                    }
                }
            }
        }
        return 1;
    } 
};

***********************************************************************************************************
**** Transpose of Matrix ( 10/07/23 ) ****

class Solution
{   
    public:  
    //Function to find transpose of a matrix.
    void transpose(vector<vector<int>>& matrix, int n)
    { 
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
    }   
};  

******************************************************************************************************
**** Unique Number of Occurrences ( 13/07/23 ) ****

class Solution
{
    public:
    bool isFrequencyUnique(int n, int arr[])
    {
        map<int,int> m;
        for(int i=0;i<n;i++){
            m[arr[i]]++;
        }
        map<int,bool> mapp;
        for(auto i:m){
            if(mapp[i.second]){
                return false;
            }
            else{
                mapp[i.second]=true;
            }
        }
        return true;
    }
};

*************************************************************************************************************
**** Implement two stacks in an array ( 14/07/23 ) ****

class twoStacks
{
    vector<int> v1;
    vector<int> v2;
    int n;
    public:
    
 
    //Function to push an integer into the stack1.
    void push1(int x)
    {
     v1.push_back(x);   
    }
    
    //Function to push an integer into the stack2.
    void push2(int x)
    {
       v2.push_back(x);
    }
    
    //Function to remove an element from top of the stack1.
    int pop1()
    {
        if(v1.size()==0){
            return -1;
        }
        else{
            n = v1[v1.size()-1];
            v1.pop_back();
            return n;
        }
    }
    
    //Function to remove an element from top of the stack2.
    int pop2()
    {
       if(v2.size()==0){
           return -1;
       }
       else{
           n = v2[v2.size()-1];
           v2.pop_back();
           return n;
       }
    }
};

************************************************************************************************
**** Delete middle element of a stack ( 15/07/23 ) ****

class Solution
{
    public:
    
    void solve(stack<int>& s,int siz){
        if(s.size()==siz){
            s.pop();
            return;
        }
        int v = s.top();
        s.pop();
        solve(s,siz);
        s.push(v);
    }
    
    void deleteMid(stack<int>&s, int sizeOfStack)
    {
        int siz;
        if(s.size()%2){
            siz = (s.size()+1)/2;
        }
        else{
            siz = (s.size())/2;
        }
        solve(s,siz);
    }
};

**************************************************************************************************
**** Queue Reversal ( 16/07/23 ) ****

class Solution
{
    public:
    queue<int> rev(queue<int> q)
    {
        int size = q.size(),n;
        stack<int> st;
        while(!q.empty()){
            st.push(q.front());
            q.pop();
        }
        while(!st.empty()){
            q.push(st.top());
            st.pop();
        }
        return q;
    }
};

*********************************************************************************************
**** First non-repeating character in a stream ( 17/07/23 ) ****

class Solution {
	public:
		string FirstNonRepeating(string A){
		     string ans="";
		     queue<char> q;
		     unordered_map<char,int> m;
		     for(int i=0;i<A.size();i++){
		         m[A[i]]++;
		         if(m[A[i]]==1){
		             q.push(A[i]);
		         }
		        
		            
		             while(!q.empty() && m[q.front()]!=1){
		                 q.pop();
		             }
		             if(q.empty()){
		                 ans+='#';
		             }
		             else{
		                 ans+=q.front();
		             }
		        
		     }
		     return ans;
		}
};

*************************************************************************************************
**** Non Repeating Character ( 20/07/23 ) ****

class Solution
{
    public:
    //Function to find the first non-repeating character in a string.
    char nonrepeatingCharacter(string S)
    {
       map<char,int> m;
       for ( int i=0;i<S.size();i++){
           m[S[i]]++;
       }
       map<char,bool> mb;
       for(auto i:m){
           if(i.second==1){
               mb[i.first]=true;
           }
       }
       for(int i=0;i<S.size();i++){
           if(mb[S[i]]){
               return S[i];
           }
       }
       return '$'; 
    }

};

**********************************************************************************************************
**** Remove duplicates from an unsorted linked list ( 22/07/23 ) ****

class Solution
{
    public:
    //Function to remove duplicates from unsorted linked list.
    Node * removeDuplicates( Node *head) 
    {
     unordered_map<int,bool> m;
     Node* first = head;
     m[head->data]=true;
     if(head->next){
         Node* second = head->next;
         while(second){
             if(m[second->data]){
                 first->next = second->next;
                 second = second -> next;
             }
             else{
                 m[second->data]=true;
                 first = second ;
                 second = second -> next;
             }
         }
         return head;
     }
     else{
         return first;
     }
     return NULL;
    }
};

*************************************************************************************************
**** Given a linked list of 0s, 1s and 2s, sort it ( 23/07/23 ) ****

class Solution
{
    public:
    //Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node *head) {
        
        int zeros = 0, ones =  0, twos = 0;
        Node* temp = head;
        while(temp){
            if(temp->data == 0){
                zeros++;
            }
            else if(temp->data == 1){
                ones++;
            }
            else{
                twos++;
            }
            
            temp = temp->next;
        }
        temp = head;
        while(temp){
            if(zeros){
                temp->data = 0;
                zeros--;
            }
            else if(ones){
                temp->data = 1;
                ones--;
            }
            else{
                temp->data = 2;
                twos--;
            }
            
             temp = temp->next;
        }
        return head;
    }
};


***************************************************************************************************
**** Right View of Binary Tree ( 24/07/23 ) ****

class Solution
{
    public:
    //Function to return list containing elements of right view of binary tree.
    vector<int> rightView(Node *root)
    {
       map<int,int> nodes;
        queue<pair<Node*,int>> q;
        q.push(make_pair(root,0));
        vector<int> ans;
        if(root==NULL){
            return ans;
        }
        while(!q.empty()){
           pair<Node*,int> temp=q.front();
           q.pop();
           Node* node=temp.first;
           int lvl=temp.second;
           nodes[lvl]=node->data;
            if(node->left){
               q.push(make_pair(node->left,lvl+1));
           }
           if(node->right){
               q.push(make_pair(node->right,lvl+1));
           }
        }
        for(auto i:nodes){
            ans.push_back(i.second);
        }
        return ans;
    }
};


*********************************************************************************************************
**** Level order traversal in spiral form ( 25/07/23 ) ****

vector<int> findSpiral(Node *root)
{
    vector<int> store;
    bool flag = false;
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    vector<int> ans;
    Node* temp;
    while(!q.empty()){
        temp = q.front();
        q.pop();
        if(temp == NULL){
            if(flag){
                for(int i=0;i<store.size();i++){
                    ans.push_back(store[i]);
                }
                store.clear();
                flag = false;
            }
            else{
                reverse(store.begin(),store.end());
                for(int i=0;i<store.size();i++){
                    ans.push_back(store[i]);
                }
                store.clear();
                flag = true;
            }
            
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            store.push_back(temp->data);
            if(temp->left){
                q.push(temp->left);
            }if(temp->right){
                q.push(temp->right);
            }
        }
        
    }
    return ans;
}

****************************************************************************************************
**** Kth Ancestor in a Tree ( 26/07/23 ) ****

void solve(Node* root,int node,unordered_map<int,int>& p){
    if(root->data == node){
        return;
    }
    if(root->left){
        p[root->left->data] = root->data;
        solve(root->left,node,p);
    }
    if(root->right){
        p[root->right->data] = root->data;
        solve(root->right,node,p);
    }
}

int kthAncestor(Node *root, int k, int node)
{
    unordered_map<int,int> p;
    p[root->data] = -1;
    solve(root,node,p);
    while(k){
        if(node == -1){
            return -1;
        }
        node = p[node];
        k--;
    }
    return node;
}


***************************************************************************************
**** Heap Sort ( 27/07/23 ) ****

class Solution
{
    public:
    //Heapify function to maintain heap property.
    void heapify(int arr[], int n, int i)  
    {
       int posi = i;
       int left = 2*i;
       int right = 2*i+1;
       
       if(left < n && arr[posi] > arr[left]){
           posi = left;
       }
       if(right < n && arr[posi] > arr[right]){
           posi = right;
       }
       
       if(posi != i){
           swap(arr[i],arr[posi]);
           heapify(arr,n,posi);
       }
    }

    public:
    //Function to build a Heap from array.
    void buildHeap(int arr[], int n)  
    { 
        for(int i=n/2;i>0;i--){
            heapify(arr,n+1,i);
        }
        
        for (int i = n ; i > 1; i--) {
 
        // Move current root to end
        swap(arr[1], arr[i]);
 
        // call max heapify on the reduced heap
        heapify(arr, i, 1);
    }
    }

    
    public:
    //Function to sort an array using Heap Sort.
    void heapSort(int arr[], int n)
    {
        int arrr[n+1];
        arrr[0] = -1;
        for(int i=0;i<n;i++){
            arrr[i+1] = arr[i];
        }
        buildHeap(arrr,n);
        for(int i=0;i<n;i++){
            arr[i] = arrr[i+1];
        }
        int a=0,b=n-1;
        while(a<b){
            swap(arr[a],arr[b]);
            a++; b--;
        }
    }
};


****************************************************************************************************

